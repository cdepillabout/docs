
# This is command-line editing hax.
#
# Press Ctrl-R to search the bash history for another command
# While your search is going, press Ctrl-R again to get another
# item.
#
# !! repeats the previous command.  !-2 repeats two commands ago.
# !-3 repeats three commands ago.  You can use !! anywhere.  
# For example:

$ ifconfig eth0
bash: ifconfig: command not found
$ /sbin/!!
eth0 Link encap:Ethernet HWaddr 00:0C:29:95:AB:90
     inet addr:192.168.127.129 

# Use the command `history` to view your history and then select a 
# command with !<n>, like !42.
#
# Also, !* gets you all the arguments to the previous command line.

# you can use touch and find interestingly
touch -t 200801160000 timestamp
find / -newer timestamp print

# use ".[^.]*" instead of ".*" to match dot files

# view the end of a file in less
less +G <file>

# after using Ctrl-Z to suspend a program, you can have it run in the 
# background by using the command `bg`.  You can bring it to the
# foreground again by using `fg`.  The same thing can be done with a root
# shell by using the command `suspend`.  This can also be done on ssh with
# the command "~<Ctrl-Z>" (that's tilde, control-z).



# reads in everything from .conkyrc and changes lightgrey to grey
perl -ne 's/lightgrey/grey/g; print $_' < .conkyrc

# this can also probably be done with sed
sed -e 's/darkgrey/blue/g' < .conkyrc

# reverse a string and change it from decimal-encoded ascii to 
# straight-up text
echo '065076100' | perl -lne '$new_string = ""; for($i = length($_) -3; $i >= 0; $i-=3) {$new_string .= chr(substr($_, $i, 3)); } print $new_string;'

# super-hax version of the above
# s/something/code/e replaces something with the _perl code_ in e
# that's really handy!  I can't call reverse on $_ explicitly because
# it's not an array?!
echo '065076100' | perl -lne 's/(\d{3})/chr($1)/eg; print reverse(split("",$_));'

# reverse of the above
echo 'brains' | perl -ne 'chomp($_); $_ = reverse(split("")); s/(.)/ord($1)/ge; print $_."\n";'


# I wanted all the songs from songs.html
# he does something funny and he doesn't let you download it.
# but he has an obscured link to it on his website.
# this reads the file, unobscures the link, and dls all the files
# I should make something to do this from stdin
perl -e '$fff = `cat songs`; $fff =~ s/\x0D\x0A//g; while ($fff =~ m/http(.){0,110}\.mp3/g) { print "Getting " . $&. "...\n"; system("wget " . "\"" . $& . "\""); }'


# shuffle lines of input on stdin
# this is pretty haxin
perl -e 'use List::Util 'shuffle'; while(<>) {push(@a, $_)}; print $_ foreach shuffle(@a)'


# read programs from world file and then look at them in eix
while read prog; do eix $prog; done < world


# write command line arguements using `perl` to record the
# same file many times using cdrecord
cdrecord -v -useinfo -pad driveropts=noforcespeed,burnfree speed=48 dev=1,0,0 -audio bananaPhone.wav bananaPhone.wav `perl -e 'print "bananaPhone.wav " x 50;'`


# use nc6 to connect flood a connection
for i in `seq 1 5` ; do
  echo 'exit' | nc 192.168.1.1 22 ;
done

# get the value of variables in the kernel
getconf GNU_LIBPTHREAD_VERSION

# log into various machines using ssh and run a command
# on all of them
for ((i=3; i<19; i+=1)); do ssh user@169.182.83.$i "echo >> who.txt; echo 169.182.83.$i >> who.txt; /sbin/ifconfig eth0 >> who.txt"; done

for ((i=3; i<19; i+=1)); do ssh user@169.182.83.$i "dmesg >> dmesg.169.182.83.$i"; done

for ((i=3; i<19; i+=1)); do ssh user@169.182.83.$i "echo 169.182.83.$i; w; echo"; done

# cat a file to another host
$ cat ~/.ssh/id_dsa.pub | ssh you@other-host 'cat - >> ~/.ssh/authorized_keys'


# forward X11 over ssh so it works well
ssh -Y user@computer

# run an exploit script many times with an increasing
# address (it's in hex so it's cool)
perl -e '$address = "0xbffff000"; for ($i = 0; $i < 4100; $i++) {print $i . "\n"; system("./exploit " . sprintf("%x", hex($address) + $i) .  " 20"); system("./stack")}'

# graph all depends from equery output
equery g xorg-server | perl -e 'while($a = <>) { $a =~ s/^\W*//; $a =~ s/\[(\W|\w)*\]//; $a =~ s/\((\W|\w)*\)//; print "=" . $a; }' 

# wget a website.  This command can be run one more time
# if it errors out the first time.  No files you already 
# downloaded will be overwritten
wget -r -l inf -nc htp://web.site.com

# find all the people with a readable home directory and
# search for a specific file in all of them...
ls -l | grep -v drwx...--- | awk '{print $9;}' | while read WHAT; do ls -dl $WHAT/badfile; done

# Find all files in this directory (.) modified in the 
# last day (-mtime -1) that aren't directories (\! -type d) 
# and execute the list function on them ls -l
find . -mtime -1 \! -type d -exec ls -l {} \; 


# find the version of GCC a binary was compiled with 
objdump -s BINARY | grep -i gcc

# within a screen session, this command executes a 
# command on all open screen terminals.  cool!
# (you have to press CTRL-a to enter screen commands)
# stuff copies a string into the input buffer of the current window
# COMMAND is the command you want to execute
# \# tells it to do it on all screens
:at \# stuff "COMMAND \012"

# do floating point math with `bc`
bc -l

# within `bc`, the 'last' variable holds the value of the last thing
# printed to the screen

# run a command on many hosts using ssh, and get the output to your screen
perl -e '$command = "uname -a | grep -v FC5"; for ($i = 1; $i < 31; $i++) { print "cs" . $i . "--\n"; system ("ssh user\@cs" . $i . " " . $command); }'

# get a list of webservers from a list of ip addresses
sudo nmap -p 80 182.345.51.* | grep -B 2 open |  grep -P -o "\d+\.\d+\.\d+\.\d+"

# then take those webservers and  request a page from them
sudo nmap -p 80 49.134.51.* | grep -B 2 open | grep -P -o "\d+\.\d+\.\d+\.\d+" | while read i; do echo $i; lynx -dump $i;echo ; echo ; done

# get a list of good file names with names
du -s * 2>/dev/null | sort -n | cut -f2 | xargs du -sh

# automate etc-update
( echo "-3"; yes) | etc-update


# get a list of files in increasing size
du -s * 2>/dev/null | sort -n | cut -f2 | xargs -d '\n' du -sh

# rename all files in a directory with a certain file extension
for file in *; do mv "$file"  "$file".ogg; done

# get all of the direct dependencies of a package
equery g firefox | egrep --color  "^ \`" | cut -d" " -f3 | sort |uniq

# create a password hash that can be used in /etc/shadow
openssl passwd -1

# make dumping of core files possible
ulimit -c unlimited
# run a program
./some_program
# while it is running, press C-\ and it will dump core


# output the sequence of numbers 1-n
# `seq n`
# for example
seq 200


# to look at BIOS information: (as root...)
dmidecode

# to grep files for a string but diplay the whole file with the 
# matching parts highlighted
glark --no-filter -N --text-color "bold red" o ~/NOTES

# to wget all mp3 files from a website
# -r is recursive
# -l3 is to only go down 3 levels
# --no-parent is to ignore references to the parent directory
wget -r -l3 --no-parent -A.mp3 http://beefyness.com/music/

# to get a program's exit code type this into the
# terminal after the program has exited
echo $?

# get a tree of the output of ps
pstree

# get all files that have the same file name but with 
# two different extensions. Get all files that have
# both a .mpg extension and a .mov extension.  you
# can then delete the one with .mpg extension
for file in *.mpg; do if [ -e ${file%.mpg}.mov ]; then rm ${file}; fi; done


# convert every image (file) in a directory to 512xWHATEVER.
# this is okay, but it's not good enough.  I'll have to use
# the perl interface for image magick to make the bigger side
# 512 instead of the top and bottom side.  This outputs correctly
# though.  the files are called smaller-1.jpg, smaller-2.jpg, etc.
convert * -resize 512 -quality 50 smaller.jpg

# indent a c file from the command line
indent -kr -ut -br -ts4 main.c

# create a compressed tar file genetic.tar.gz from the folder genetic/
tar czf genetic.tar.gz genetic/


# save a failing hard drive
dd if=/dev/hda of=/dev/hda bs=512
# or
cat /dev/urandom > /dev/hdb
cat /dev/zero > /dev/hdb


# change all instances of 'package genetic' to 'package midi' 
# in a group of java files 
sed -i -e 's/package genetic/package midi/' *.java

# encrypt a file using gpg (outputs file.txt.gpg)
gpg -c file.txt
# decrypt it and output it to the console
gpg -d file.txt.gpg
# decrypt it and output it to file.txt
gpg file.txt.gpg


# try to preserve permissions when copying a file
cp -p file newfile

# find setuid and setgid programs
find / -xdev -type f -perm +04000
find / -xdev -type f -perm +02000


# this isn't really a hack, but a way to make firefox the 
# default url opener for gnome applications
gconftool-2 -t string --set /desktop/gnome/url-handlers/http/command "firefox-bin %s"
# this get's the current value
gconftool-2 --get /desktop/gnome/url-handlers/http/command


# search for a string only in the dot files
# (I think there is a shorter way of doing this)
ls -a | grep "^\." | grep -v "^\.\.\?\$" | xargs grep -r "firefox-bin "


# show open files for a process. (this can be used to get flash videos
# from firefox).
ls -lU /proc/12279/fd

# get rid of pdf password
pdftops -upw password pdffile.pdf
ps2pdf pdffile.ps newpdffile.pdf

# crack pdf password
pdfcrack -f file.pdf

# pdftk...

# this can be used to get a graphical view of all the devices hal can see
gnome-device-manager
# here is non-graphical
lshal

# set up ssh tunnel
# connect to localhost at port 58888, it tunnels to "other-computer" and connects to 
# "other-computer"s localhost at port 54444
ssh -vv -NL 127.0.0.1:58888:127.0.0.1:54444 other-computer


# this is used to enumerate all the pam modules (and other included pam files) 
# being used on a system and print what pam files they are being used in.
cat /etc/pam.d/* | grep -v '^#' | grep -v '^$' | sed -e 's/\( \|\t\)\+/\t/g' | cut -f 3 | sort | uniq |  while read type; do echo; echo "\"$type\" in:"; grep "$type" /etc/pam.d/* ; done


# Set and get extended filesystem attributes on file 'what'.
# For this to work, you need to mount this filesystem with 
# the user_xattr flag, and support for CONFIG_*_FS_XATTR
# needs to be compiled into your kernel.
setfattr -n user.KEY1 -v VALUE what 
getfattr what 
man 5 attr


# get capabilities for binaries
getcap /bin/ping
# let /bin/ping send raw packets
setcap cap_net_raw=ep /bin/ping


# get acl for file
getfacl some_file
# let user ice be able to read and write to file
setfacl -m user:ice:rw- some_file
setfacl -m u:ice:rw- some_file
# let user tippy and people in group lensmen read our files
setfacl -m u:tippy:r--,g:lensmen:r-- some_file
# change mask so that even people with the ability to write to file can't
setfacl -m mask::r-- some_file
# remote acl for ice from some_file
setfacl -x u:ice some_file
# remove all acls from file
setfacl -b some_file
# if you just turn on execute for a directory and not read, then
# the person can open the directory but not read any of the files.

# The default ACL is only applied to directories, and it defines the 
# permissions that a newly created file or directory inherits from its parent directory.
setfacl -d -m u::rwx,u:ice:rx,g::rx,o::- some_dir
# The umask has no effect if a default ACL exists.
# You can also modify and create default ACLs with another syntax, prefixing the u, g, or o entries with a "d" :
setfacl -m d:u:ice:rwx,d:g:somegroup:rwx some_dir
# The mv command will always preserve ACLs if it is possible. If it is not possible, 
# it will issue a warning. The cp command will only preserve ACLs if used with the -p or -a options.

# If you already have a file with a complex ACL, you can easily copy that ACL to other 
# files by piping the output of a getfacl command into the setfacl command.
getfacl bingo.txt | setfacl --set-file=- test*


# organize data in columns
# (in this example, we are printing out how many files is in each directory in .)
# Output will look like this:
# dir1				2	files
# dir2				10	files
# verylongdirname	50	files
for directory in *; do echo $directory `ls ${directory} | wc -l` "files"; done | column -t

# pathname expansion that gets all files except . and ..
# you need these three different things for it to work
for f in   *  .[^.]*   ..?*  ; do echo $f; done


# when trying to redirect stderr to stdout and then redirect standard out somewhere else, you have to do them opposite.
deluged -d 1>>/tmp/some/file  2>&1


# This is from /etc/sudoers
# don't put up the big lecture when username is trying to use sudo
Defaults:username	!lecture
# don't ask for username's password when username is using sudo, 
# ask for the target uesrs password instead (by default, root)
Defaults:username	targetpw


# in a tab separated list, print the number of columns
# for each row.  (this is useful for checking that each row 
# has the same number of columns).
cat acronym\ and\ abbreviation\ list.csv | perl -lne 'print scalar(split("\t"))'
# here is another way to do it
cat acronym\ and\ abbreviation\ list.csv | perl -F"\t" -lane 'print scalar(@F)'


# Server files out of current directory (some/dir/) over http.
cd some/dir/
python -m SimpleHTTPServer
# To serve it on a different port:
python -m SimpleHTTPServer 8080
# To only listen on localhost's port, you need to write a 
# script using SimpleHTTPServer.


# Copy files from source_dir/ to dest_dir/ on other-machine.example.com.
# -r			recursively copy files
# -z			compress files
# -t			preserve times
# -l			preserve soft links
# -p			preserve permissions
# --delete		delete extraneous files from destination dirs
# --force		force deletion of dirs even if not empty
rsync -r -z -t -l -p -v --delete --force source_dir/ other-machine.example.com:dest_dir


# Use x11 forwarding over ssh after su'ing to root.
# First, as your normal use, get the xauth connection.
xauth list  # this is run as your normal user
# Then after actually su'ing, add that xauth information.
xauth add \ # this is run as root
	somehost.somedomain:10 mit-magic-cookie-1 4d22408a71a55b41ccd1657d377923ae
#
# Another way would be to use this command as root:
xauth merge /home/$USER/.Xauthority


# If a ssh connection is failing because packets are getting fragmented,
# the mtu of all interfaces on both systems may need to be changed.
# 576 is a good default value.
# http://www.snailbook.com/faq/mtu-mismatch.auto.html


# Find all empty directories below the current directory.
# -depth starts at the lowest level directory and works it's way back up.
find . -depth -type d -empty


# reverse lines of a file.
tac FILE

# reverse output from ls
ls /some/dir | tac


### profiling
#
# use perf to record performance for 10 secs 
# (this just runs the command sleep for 10s and records the
# performance of the system during that time)
perf record -a -g sleep 10
# This displays an interactive report to look at
$ perf report --sort comm,dso 
#
# use sysprof to record performance of the system 
# (this is a GUI :-\)
sysprof
#
# use atop to get really detailed performance of the system
atop
#



# when in bash, you can edit the current command line
# in $EDITOR by using Ctrl-X Ctrl-E.
