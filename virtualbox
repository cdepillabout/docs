
# on arch linux:
# - Run "/etc/rc.d/vboxdrv setup" as root every time your kernel is upgraded, to
#   compile the module for the new kernel version.
# - Add your user to the vboxusers group:
#      gpasswd -a USERNAME vboxusers


# load the module
modprobe vboxdrv

# You must load vboxnetflt for Host Interface Networking:
modprobe vboxnetflt

# You must load vboxnetadp for Host-Only networking:
modprobe vboxnetadp


# start headless from the console
VBoxManage startvm <vm name> -type vrdp

# give a .vdi hard drive file a new UUID 
# (used after cp'ing an existing .vdi file)
VBoxManage internalcommands sethduuid <hard_drive_name.vdi>

# another way to clone a hard drive (not sure how this works exactly)
# both of these should be the same
VBoxManage clonehd ....
VBoxManage clonevdi SOURCE.vdi NEWCOPY.vdi

# This is not that simple.  This clones the base image, but does not get the
# current state of the drive or any snapshot information.  Here is how to do that:
#
# To clonehd the Current State of a disk:
#
#  * Open the Virtual Media Manager (Menu: File>Virtual Media Manager).
#  * Navigate to the hard disk you want to clone and fully expand the tree (use * key on numeric keypad).
#  * Find the {hexUUID}.vdi file that is attached to the VM you want to clone the Current State of.
#    It will be (one of) the leaf files at the end of a branch.
#    When you select it, the 'Attached to:' text at the bottom of the window will say:
#		'Attached to: <VMName>', without any (snaphot name) in brackets after it.
#  * Click the filename to the right of the 'Location:' displayed at the bottom of the window.
#  * Ctrl+C / Copy to copy the text to the clipboard, which will be something like:
#		(path){b6441469-5ccb-418c-8fdd-73c5e1a17314}.vdi
#  * Ctrl+V / Paste and extract the hexUUID value (removing the {} brackets) and run clonehd to clone it!
VBoxManage clonehd b6441469-5ccb-418c-8fdd-73c5e1a17314 CloneDisk.vdi

# To clonehd a snapshot of a disk:

#  * Open the Virtual Media Manager (Menu: File>Virtual Media Manager).
#  * Navigate to the hard disk you want to clone and fully expand the tree (use * key on numeric keypad).
#  * Find the {hexUUID}.vdi file that is attached to the VM (and Snapshot) you want to clone.
#    It will be one of the files along a branch.
#    When you select it, the 'Attached to:' text at the bottom of the window will say:
#		'Attached to: <VMName> (<SnapshotName>)', with (snaphot name) in brackets after it.
#  * Click the filename to the right of the 'Location:' displayed at the bottom of the window.
#  * Ctrl+C / Copy to copy the text to the clipboard, which will be something like:
#		(path){75bd6ab1-ce25-4b56-aa39-7826c9ebcc93}.vdi
#  * Ctrl+V / Paste and extract the hexUUID value (removing the {} brackets) and run clonehd to clone it!
VBoxManage clonehd 75bd6ab1-ce25-4b56-aa39-7826c9ebcc93 CloneDisk.vdi


# Opening ports on the virtual machine when connnecting over NAT
# This example shows how to open the ssh port.
VBoxManage setextradata "Linux Guest" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/Protocol" TCP
VBoxManage setextradata "Linux Guest" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/GuestPort" 22
VBoxManage setextradata "Linux Guest" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/guestssh/HostPort" 2222
# The above example assumes a PCNet virtual network card; if you have
# configured the guest to use the Intel PRO/1000, replace "pcnet" with
# "e1000" in the above commands and use "virtio-net" if you configured the
# guest to use the Paravirtualized Network device. Similarly, if you want
# to configure a different interface instance replace the /0/ with the
# appropriate index. pcnet, e1000 and virtio-net are counted separately
# in this respect, and counting starts at 0 for these types.

# The name guestssh is an arbitrary one chosen for this particular
# forwarding configuration. With that configuration in place, all TCP
# connections to port 2222 on the host will be forwarded to port 22
# on the guest. Protocol can be either of TCP or UDP (these are case
# insensitive). To remove a mapping again, use the same commands, but
# leaving out the values (in this case TCP, 22 and 2222).


#
# Add a new network interface to our guest. 
# (Since the GUI only allows us to configure 4 NICs, this
# will allow us to add up to 8 NICs.)
# (All of these were taken from the options listed on this page:
# http://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm)
# 

# Add a fifth NIC, make it bridged.
# (eth0 is the interface on the host that it will bridge to)
VBoxManage "Your VM Name" --nic5 bridged --bridgeadapter5 eth0

# Add a sixth NIC, make it nat'd
# (I haven't tested this, so I'm not exactly sure that it works.)
VBoxManage "Your VM Name" --nic6 nat 

# Disable the seventh NIC
VBoxManage "Your VM Name" --nic7 none 


# convert a qemu image qcow image to a virtualbox image
qemu-img convert -O raw test.qcow2 test.raw
VBoxManage convertfromraw /full/path/to/test.raw /full/path/to/test.vdi
VBoxManage modifyvdi /full/path/to/test.vdi compact


######
# Detach a USB device from a host.
######

# first list the available devices
VBoxManage list usbhost

# now detach the desired device
VBoxManage controlvm "Some VM" usbdetach c5e53dc3-29ae-4c2b-8042-7d042afa5062

# now attach it to a different device
VBoxManage controlvm "Other VM" usbattach c5e53dc3-29ae-4c2b-8042-7d042afa5062
