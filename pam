
- MANAGEMENT GROUPS:

account (account) - provide account verification types of service:
has the user's password expired?; is this user permitted access to the
requested service?

authentication (auth) - authenticate a user and set up user
credentials. Typically this is via some challenge-response request that
the user must satisfy: if you are who you claim to be please enter
your password. Not all authentications are of this type, there exist
hardware based authentication schemes (such as the use of smart-cards
and biometric devices), with suitable modules, these may be substituted
seamlessly for more standard approaches to authentication - such is the
flexibility of Linux-PAM.

password (password) - this group's responsibility is the task of updating
authentication mechanisms. Typically, such services are strongly coupled
to those of the auth group. Some authentication mechanisms lend themselves
well to being updated with such a function. Standard UN*X password-based
access is the obvious example: please enter a replacement password.

session (session) - this group of tasks cover things that should be
done prior to a service being given and after it is withdrawn. Such
tasks include the maintenance of audit trails and the mounting of the
user's home directory. The session management group is important as
it provides both an opening and closing hook for modules to affect the
services available to a user.


- CONTROL FIELD

the "control" field indicates the behavior of the PAM-API should the
module fail to succeed in its authentication task. There are two types
of syntax for this control field: the simple one has a single simple
keyword; the more complicated one involves a square-bracketed selection
of value=action pairs.

For the simple (historical) syntax valid control values are:

required - failure of such a PAM will ultimately lead to the PAM-API
returning failure but only after the remaining stacked modules (for this
service and type) have been invoked.

requisite - like required, however, in the case that such a module returns
a failure, control is directly returned to the application. The return
value is that associated with the first required or requisite module to
fail. Note, this flag can be used to protect against the possibility
of a user getting the opportunity to enter a password over an unsafe
medium. It is conceivable that such behavior might inform an attacker of
valid accounts on a system. This possibility should be weighed against
the not insignificant concerns of exposing a sensitive password in a
hostile environment.

sufficient - success of such a module is enough to satisfy the
authentication requirements of the stack of modules (if a prior required
module has failed the success of this one is ignored). A failure of this
module is not deemed as fatal to satisfying the application that this
type has succeeded. If the module succeeds the PAM framework returns
success to the application immediately without trying any other modules.

optional - the success or failure of this module is only important if
it is the only module in the stack associated with this service+type.

include - include all lines of given type from the configuration file
specified as an argument to this control.

substack - include all lines of given type from the configuration file
specified as an argument to this control. This differs from include
in that evaluation of the done and die actions in a substack does not
cause skipping the rest of the complete module stack, but only of the
substack. Jumps in a substack also can not make evaluation jump out of it,
and the whole substack is counted as one module when the jump is done
in a parent stack. The reset action will reset the state of a module
stack to the state it was in as of beginning of the substack evaluation.


- the module path can either be a relative path from the standard location
(/lib/security/) or an absolute path



- all of the files in /etc/pam.d are names of applications.
