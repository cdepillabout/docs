##############################################################
# Here are commands and information relevant on working with #
# low-level c and asm libraries.                             #
##############################################################

# link programs using ld on 64 bit arch linux.
# ld is a strange beast.  The arguments have to be exactly right and they 
# have to come in an exact order.  If you need additional arguments for your program,
# they can go right next to -lc (-lc links in libc.so).
ld -dynamic-linker /lib/ld-linux-x86-64.so.2 --verbose hello.o -o hello_ld \
	/usr/lib/crt1.o /usr/lib/crti.o  /usr/lib/gcc/x86_64-unknown-linux-gnu/4.5.0/crtbegin.o \
	-lc  \
	/usr/lib/gcc/x86_64-unknown-linux-gnu/4.5.0/crtend.o /usr/lib/crtn.o

# you can use nm to check which symbols an object file (for instance, crt1.o) exports.
nm /usr/lib/crt1.o
# The output of this command is:
# 	0000000000000000 R _IO_stdin_used
# 	0000000000000000 D __data_start
# 					 U __libc_csu_fini
#  	                 U __libc_csu_init
#  	                 U __libc_start_main
# 	0000000000000000 T _start
# 	0000000000000000 W data_start
# 	                 U main
# So you can see the symbols in the file.
# 	- The first column contains the symbol value, in the radix selected 
#	by options (see below), or hexadecimal by default.
#	- The second column contains the symbol type.  If lowercase, the symbol 
#	is local; if uppercase, the symbol is global (external).
#			- "A"
#					The symbol's value is absolute and will not be changed by
#					farther linking.
#			- "D"
#					The symbol is in the initialized data section.	
#			- "R"
#					The symbol is in a read only data section.
#			- "T"
#					The symbol is in the text (code) section.
#			- "U" 
#					The symbol is undefined.
#			- "W"
#					The symbol is a weak symbol that has not been 
#					specifically tagged as a weak object symbol.  When 
#					a weak defined symbol is linked with a normal defined symbol, 
#					the normal defined symbol is used with no error.  When a weak 
#					undefined symbol is linked and the symbol is not defined, 
#					the value of the symbol is determined in a system-specific 
#					manner without error.  On some systems, uppercase indicates 
#					that a default value has been specified.


# Statically link the file.
# "--start-group ... --end-group":
#	The specified archives are searched repeatedly until no new undefined references are created.
#	Normally, an archive is searched only once in the order that it is specified on the command line.
#	If a symbol in that archive is needed to resolve an undefined symbol referred to by an object in an
#	archive that appears later on the command line, the linker would not be able to resolve that
#	reference.  By grouping the archives, they all be searched repeatedly until all possible references
#	are resolved.
ld -verbose -static -o hello_ld_static \
	/usr/lib/crt1.o /usr/lib/crti.o 
	/usr/lib/gcc/x86_64-unknown-linux-gnu/4.5.0/crtbeginT.o \
	-L/usr/lib/gcc/x86_64-unknown-linux-gnu/4.5.0 hello.o \
	--start-group  -lgcc_eh -lgcc -lc --end-group \
	/usr/lib/gcc/x86_64-unknown-linux-gnu/4.5.0/crtend.o \
	/usr/lib/crtn.o 


# Extract object files from a .a library
ar vx /usr/lib/libcurl.a
# You can also just use nm to list the files on the archive.
nm -s /usr/lib/libcurl.a

# To create a library out of object files, you can use a command like this
ar rcs my_library.a file1.o file2.o


# show memory mapping of cat process.
cat /proc/self/mem


# The `ln` command uses shared libraries. Shared libraries
# often involve symbolic links between a generic name for the library
# and a specific level of the library, so if the links are not present or
# broken for some reason, then the `ln` command itself might be inoperative,
# creating a circular problem. To protect against this possibility, some
# Linux systems include a statically linked version of the `ln` program as
# the `sln` program (/sbin/sln).


# Show the shared libraries a binary is linked to.
ldd /bin/cat
# There's more than one way to skin a cat....
/lib/ld-linux-x86-64.so.2 --list /bin/cat

# process /etc/ld.so.conf (and probably /etc/ld.so.conf.d/*)
# to create /etc/ld.so.cache. The dynamic loader (/lib/ld-linux-x86-64.so.2)
# uses the cached information from ld.so.cache to locate files that are to be
# dynamically loaded and linked.  If you change ld.so.cache, you must run
# this command again.
ldconfig

# Display contents of /etc/ld.so.cache
ldconfig -p

