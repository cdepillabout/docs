
# also check out http://github.com/guides/git-cheat-sheet
# also http://wiki.sourcemage.org/Git_Guide

# create an empty git repository
git init

# create a "remote" for a repository at a certain url.
# This creates a remote for the URL git@github...exercises.git and 
# calls it "origin".
git remote add origin git@github.com:cdepillabout/sicp-exercises.git

# make some changes to the files in your repository...
# then, commit those changes to your repository
git commit -a

# push those changes to the server.
# We are pushing to our remote origin's master branch
git push origin master


# create new branch called experimental
git branch experimental

# change to the new branch
git checkout experimental

# now, edit a file, commit, and switch back to the master
git commit -a
git checkout master

# to see what changes you're about to merge together'
git diff master experimental

# merge the experimental branch with the master branch (our current branch)
git merge experimental

# If we have conflicts, view them
git diff

# edit the conflicting files, then commit again
git commit -a 

# delete your experimental branch when all the files are already in the current branch.
# this checks to make sure you don't have any pending changes.
git branch -d experimental

# delete your crazy idea branch even if you have files with changes that have not
# been merged.
git branch -D crazy-idea


# push a local branch to your remote repository
git push origin <branch_name>
# remove a branch from the remote repository
git push origin :somebranch


# On github, there is a public clone url and your own clone url.
# The public clone url looks like git://github.com/...
# but your own clone url looks like git@github.com/... (this uses ssh)
# Cloning either one is the same, but if it's the public url, you
# can't push to it.

# clone or copy a repository from github (after you've forked it to your account --
# that's why the name is cdepillabout)
git clone git@github.com:cdepillabout/merb-core.git
# add their directory as a place you can pull from
git remote add wycats git://github.com/wycats/merb-core.git

# 1
# go back to your copy
git checkout master
# get their latest copy and automatically merge
git pull wycats master

# OR

# 2
# go back to your copy
git checkout master
# get their latest updates
git fetch wycats
# manually merge
git merge wycats/master



# set up aliases
git config --global alias.co checkout


# ignore certain files
# Create a file in the root directory called ".gitignore and add some files to it
$ cat .gitignore

*.log
db/schema.rb
db/schema.sql

$ 



# show the files that have been commited
git ls-files

# show the status
git status


# to create a new branch
git branch [name of your new branch]

# to push the new branch to a remote repository
git push origin [new-remote]

# to pull a new branch from a remote repository
git fetch origin [remote-branch]:[new-local-branch]

# git-pull and git-fetch are different because git-pull does a git-fetch 
# followed by a git-merge. You can do a "git fetch" at any time to update 
# your local copy of a remote branch. This operation never changes any of 
# your own branches and is safe to do without changing your working copy. 
# A "git pull" is what you would do to bring your repository up to date with 
# a remote repository.


# first...
git remote add laptop duo2book.local:repos/m_project
# then, to push a committed local change of the XYZ branch to the remote 
# LAPTOP branch
git push laptop xyz


# show all changes to a file
git log -p NOTES

# get some color output for some commands
git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto
# this does it for all commands
git config --global color.ui auto


# view changes to file vim since revision fa5e02cde11
git diff fa5e vim

# show a file vim from an old revision 1c730e9fca281
git show 1c730e:vim

# use a pager to display git output
GIT_PAGER='less' git diff

# make sure that our repository on github is used for pulls
git config branch.master.remote origin
git config branch.master.merge master

# show the differences between two revisions
git diff c798e6f2cf6d..2f26c3c807

# show the differences between revision and HEAD
git diff c798e6f2cf6d..HEAD

# pull from the fishes branch of the remote URL, store in mybranch,
# and merge into the current branch
git pull git://example.com/project.git fishes:mybranch

# format a patch for each commit in HEAD but not in origin
git format-patch origin..HEAD

# show what changed between each commit
# (with -p it gives a diff for each commit)
git what-changed -p

# force an overwrite of your local changes when you are pulling
# from a remote repository (the +master:master means that we
# are updating origin/master [the first 'master'] onto our master
# [the second 'master'], the plus indicates that it will be updated
# even if it doesn't fast forward).
git pull origin +master:master


# create a branch from the previous commit
git branch oldstuff HEAD^

# copy someone else's repository
# check out man git-clone for info on different url types
# that can be used
git clone ssh://server/repository

# create branch 'test' on remote repository 'origin'
git push origin test

# delete a branch 'test' from remote repository 'origin'
git push origin :test

# get rid of all local changes and go back to the previous commit
# (HEAD can be omitted)
git reset --hard HEAD
# to do this with a whole branch
git checkout -f
# also to just discard some changes, try
git checkout some/path


# tell git your username and email address
git config --global user.name '(cdep) illabout' 
git config --global user.email 'cdep.illabout@gmail.com'


# Merges (to be discussed later), as well as operations such as git reset,
# which change the currently checked-out commit, generally set ORIG_HEAD
# to the value HEAD had before the current operation.


# from github:

#Global setup:

#Download and install Git
git config --global user.name "Your Name"
git config --global user.email swoosh.news@gmail.com
#Add your public key


# Next steps:

mkdir swoosh-news
cd swoosh-news
git init
touch README
git add README
git commit -m 'first commit'
git remote add origin git@github.com:swooshnews/swoosh-news.git
git push origin master


#Existing Git Repo?

cd existing_git_repo
git remote add origin git@github.com:swooshnews/swoosh-news.git
git push origin master
			


# If you add some things to .gitignore, and you are wondering if it
# masks files that are already in the repo, you can check with a command like this:
git ls-files -i --exclude-standard


# To set up a remote git repository, you can do something like this:
# (This will be the git repo on the server)
mkdir example.git
cd example.git
# to share with the group...
git init --bare --shared=group
# or have the repo all to yourself (git uses permissions reported by umask)
git init --bare 

# Then we create our local repo and commit to the server
mkdir example
cd example
git init
touch README
git add README
git commit -m 'first commit'
git remote add origin git@REMOTE_SERVER:example.git
git push origin master


# Git has a staging area for code before you commit.
# The staging area is also referred to as the index.
# This will add something that will be commited on the next commit.
git add somefile.txt
# Only add some changes in this file to the staging area.
git add --patch somefile.txt
# You can check the diffs of the files in the staging area.
# (without the --cached, it will display the diffs of the unstaged
#  or working copy of the files)
git diff --cached
# Then, commit the changes that have been staged.
# By default git-commit stores the current contents of the index in a 
# new commit along with the log message from the user.  (But if you 
# give git-commit some files as arguments, commit will ignore the changes
# staged in the index, and instead record the current contents of the listed
# files.  Giving the -a switch will automatically "add" all changes from all 
# known files.)
git commit -m "Fix some bad stuff with the files that have been staged."

# git-add actually does everything you could want with the staging area,
# so a more powerful command to run is with --interactive.
# git-add is your interface for modifing the staging area.
git add --interactive


# After a merge (initiated by git merge or git pull) stops because of conflicts, cleanly merged paths are
# already staged to be committed for you, and paths that conflicted are left in unmerged state. You would
# have to first check which paths are conflicting with git status and after fixing them manually in your
# working tree, you would stage the result as usual with git add
git status | grep unmerged
# The output will be "unmerged: hello.c".
# You need to edit this file to fix the conflicts.
(edit hello.c)
# Then you can add this file to your index and then commit it.
git add hello.c
# After resolving conflicts and staging the result, git ls-files -u would stop mentioning the conflicted
# path. When you are done, run git commit to finally record the merge:
git commit


# Create a new branch from "some_other_branch" and check it out immediately.
git checkout -b my_new_branch some_other_branch


# If you make some changes in one branch, but you made a mistake, and actually
# wanted to make those changes in another branch, you can  use this command to 
# switch branches (to "some_other_branch") and carry over the changes in your 
# working copy and in your index to the new branch.
git checkout -m some_other_branch

##########################
# Examples using git-reset
##########################

#
# 1) Undo a commit and redo
#
git commit ...
# This is most often done when you remembered what you just committed is incomplete, or you
# misspelled your commit message, or both. Leaves working tree as it was before "reset".
# Doesn't mess with your working copy or with the index.
git reset --soft HEAD^
# edit some files...
(edit some files...)
# "reset" copies the old head to .git/ORIG_HEAD; redo the commit by starting with its log message.
# If you do not need to edit the message further, you can give -C option instead.
git commit -a -c ORIG_HEAD

# Takes the changes staged in the index and squashes them into the previous
# commit. This lets you fix a problem with the last commit, which is almost 
# always where you see the technique prescribed, but it also opens up the 
# option of a commit-heavy workflow where you continuously revise and annotate 
# whatever it is you$B!G(Bre working on.
# This is an easy way to do the previous resetting and committing.
git commit --amend


#
# 2) Undo commits permanently
#
git commit ...
# The last three commits (HEAD, HEAD^, and HEAD~2) were bad and you do not want to ever see them
# again. Do not do this if you have already given these commits to somebody else.
# With this, you lose your working copy and the index.
git reset --hard HEAD~3


#
# 3) Undo a commit, making it a topic branch
#
# You have made some commits, but realize they were premature to be in the "master" branch. You
# want to continue polishing them in a topic branch, so create "topic/wip" branch off of the current
# HEAD.
git branch topic/wip
# Rewind the master branch to get rid of those three commits.
git reset --hard HEAD~3
# Switch to "topic/wip" branch and keep working.
git checkout topic/wip


#
# 4) Undo add
#
# You edit some files and add them to the index to be committed. You
# do not want to see them when you run "git diff", because you plan 
# to work on other files and changes with these files are distracting.
git add frotz.c filfre.c
# Somebody asks you to pull, and the changes sounds worthy of merging.
# However, you already dirtied the index (i.e. your index does not match 
# the HEAD commit). But you know the pull you are going to make does not 
# affect frotz.c nor filfre.c, so you revert the index changes for these 
# two files. Your changes in working tree remain there.
git reset
# Now you can pull. Leaving the frotz.c and filfre.c changes still in the
# working tree.
git pull git://info.example.com/ nitfol


#
# 5) Undo a merge or pull
#
# A pull results in a lot of conflicts.
$ git pull
Auto-merging nitfol
CONFLICT (content): Merge conflict in nitfol
Automatic merge failed; fix conflicts and then commit the result.
# You don't want to deal with it now, so you need to reset everything back
# to the state in which you had it. "pull" has not made merge commit, 
# so "git reset --hard" (which is a synonym for "git reset --hard HEAD") 
# clears the mess from the index file and the working tree.
$ git reset --hard


#
# 6) Undo a merge or pull
#
# Merge a topic branch into the current branch, 
# which resulted in a fast-forward.
$ git pull . topic/branch
Updating from 41223... to 13134...
Fast-forward
# But you decided that the topic branch is not ready for public consumption 
# yet. "pull" or "merge" always leaves the original tip of the current 
# branch in ORIG_HEAD, so resetting hard to it brings your index file 
# and the working tree back to that state, and resets the tip of the 
# branch to that commit.
$ git reset --hard ORIG_HEAD


# 
# 7) Interrupted workflow
#
# Suppose you are interrupted by an urgent fix request while you are in
# the middle of a large change.  The files in your working tree are not in
# any shape to be committed yet, but you need to get to the other branch
# for a quick bugfix.
$ git checkout feature ;# you were working in "feature" branch and
$ work work work       ;# got interrupted
# This is just like a snapshot that you will restore and then blow away later
$ git commit -a -m "snapshot WIP"
# Now go to master and fix the problem.
$ git checkout master
$ fix fix fix
$ git commit ;# commit with real log
# Now go back to feature for the stuff you were working on.
$ git checkout feature
# This removes the commit with the message "snapshot WIP",
# and sets your working tree to the state just before you made
# the snapshot.
$ git reset --soft HEAD^ ;# go back to WIP state
# At this point the index file still has all the WIP changes 
# you committed as snapshot WIP. This updates the index to 
# show your WIP files as uncommitted.
$ git reset


# This can also be done much easier with git-stash.
# 
$ (edit the files you were working on)
# Stash the changes in those files away
$ git stash
# Edit a different set of files.
$ (edit emergency fix)
$ git commit -a -m "Fix in a hurry"
# Now get those changes back that you had stashed.
$ git stash pop


#
# 8) Reset a single file in the index
# 
# Suppose you have added a file to your index, but later decide you
# do not want to add it to your commit. You can remove the file from the
# index while keeping your changes with git reset.
#
# This removes the file from the index while keeping it 
# in the working directory.
git reset -- frotz.c
# Commit all other changes in the index.
git commit -m "Commit files in index"
# Adds the file to the index again.
git add frotz.c



#
# Simple stuff with stash -- Pulling into a dirty tree
#
# When you are in the middle of something, you learn that there are upstream
# changes that are possibly relevant to what you are doing. When your local
# changes do not conflict with the changes in the upstream, a simple git
# pull will let you move forward.
# 
# However, there are cases in which your local changes do conflict with
# the upstream changes, and git pull refuses to overwrite your changes. In
# such a case, you can stash your changes away, perform a pull, and then
# unstash, like this:
$ git pull
...
file foobar not up to date, cannot merge.
$ git stash
$ git pull
$ git stash pop




# Change some commits in the past. (This goes back 10 commits.)
# You can delete, squash, edit, and reorder commits.
git rebase --interactive HEAD~10


# Create a remote tracking branch.  When branches are created
# using the --track option, they will be set up to linked to the remote
# branch. From here you can git checkout the branch and work with it,
# and since it$B!G(Bs tracking the remote branch, it will know where to
# bring in changes from when you fetch or pull.
git branch --track new_branch origin/some_branch

# show where things get pushed to and pulled from per remote.
git remote -v show REMOTE_NAME
# so this should normally be something like this:
git remote -v show origin



# get's changes from your remote
git fetch 
# show changes between your current stuff, and the stuff you will merge in.
git log -p HEAD..FETCH_HEAD


# Ignore changes in files that are already committed to the repository
git update-index --assume-unchanged FILENAME


# Merge in changes from a branch, but just leave them as changes to be commited
# in the next commit.
git merge --squash someotherbranch


################################
### LOW LEVEL GIT OPERATIONS ###
################################

# NOTES
# - the index refers to the set of newly created trees and blobs which you
#	created by running `git add`. These new objects will soon get bound into a
#	new tree for the purpose of committing to your repository, but until then,
#	they are only referenced by the index.

# In .git/objects/*, there are all the objects git knows about.
# In order to get the type of an object, you can use a command like this
git cat-file -t 7b06b409

# If this is a commit, you can list the changelog message with a command like this
git cat-file commit 7b06b409

# if this object is a tree, or to list the tree from a commit, use this command
git cat-file tree 49463b56

# list the files in a tree
git ls-tree 49463b56

# cat a blob in a tree
git cat-file blob 1ac1918

# objects are added to .git/objects/* as soon as files are added to the index.
# List files in the staging area (the index)
git ls-files --stage

# record the contents of the index in a tree
git write-tree

# create a new commit based on a tree in the index
echo "Initial commit" | git commit-tree 49463b56

# inform git that the branch name "master" should now refer to our recent commit.
# Also be aware that the .git/HEAD gets created by `git init` pointing to the master
# branch, so at this point we have a fully functional git repo with one commit, one tree,
# one blob, and one branch.
# (This is how you create a new branch...)
echo 7b06b409f4fbb289832d32cfe6b951f245fe053a > .git/refs/heads/master
# here is another much safer way to do this
git update-ref refs/heads/master 7b06b409f

# HEAD is by default associated with master, but we can do it manually like this.
git symbolic-ref HEAD refs/heads/master









# reflog can show you what your head pointer to at many different times.
# This can often save the day if you think you lost work.
git reflog


# Show unreachable objects
git fsck --unreachable

# Show all unreachable commits in gitk
git fsck --unreachable | grep commit | cut -f3 -d' ' | xargs gitk --all
# this is actually a better method
gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )



# Add a tag.
# '-a' means that this is an unsigned tag, that is, not signed by a GPG key.
# We need to use '-a' because we don't want to create a "lightweight" tag.
# '-m' is a message to use for this tag.
git tag -a v1.0.0 -m "Creating the first official version."

# push that tag
git push --tags

# list all tags
git tag

# list only certain tags starting with 'v1.4.2.'
git tag -l v1.4.2.*


# make git not quote unicode filenames
git config core.quotepath false
