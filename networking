
############ IPTABLES ###############

# accept traffic that _I_ initiated
iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# accept traffic from localhost
iptables -A INPUT -s localhost -j ACCEPT


#
# this is to limit connections to sshd
# http://www.debian-administration.org/articles/187
#

# sets a list with the ip of new connections to port 50084
iptables -A INPUT -p tcp --dport 50084 -m state --state NEW -m recent --set

# updates that list of connections if they have had
# more than 4 hits in 60 seconds.  if so, drop.
iptables -A INPUT -p tcp --dport 50084 -m state --state NEW -m recent --update --seconds 60 --hitcount 4 -j DROP

# opens this port for connections that have not been dropped
iptables -A INPUT -p tcp --dport 50084 -j ACCEPT





# open a specific port
iptables -A INPUT -p tcp -i eth0 --dport 80 -j ACCEPT

# this might be better because it puts it before the DROP rule
#iptables -I INPUT 2 -p tcp -i eth0 --dport 80 -j ACCEPT

# make the policy for incomming traffic to DROP
iptables -P INPUT DROP



############## ROUTE COMMANDS #################3

# add a default gateway to the intarweb
route add default gw 192.168.1.1

# an alternative way
route add -net 0.0.0.0/0 gw 192.168.1.1


# this is the command run when an interface is brought up with
# the command `ifconfig eth0 192.168.1.104`
route add -net 192.168.1.0/24 dev eth0`


# delete the route created for you when you bring up an if_interface 
# with the command `ifconfig eth0 192.168.1.104`
# (the /24 is important)
route del -net 192.168.1.0/24 dev eth0



############### TCPDUMP ###############

# don't convert addresses to names
tcpdump -n

# cature on eth0
tcpdump -i eht0

# capture all packets that are not arp and not coming from or
# going to port 22
tcpdump -i eth0 -n -v 'not port 22 and not arp'


############### DIG ###################

# get a trace of all dns servers contacted when looking up
# an address or reversing an address.
dig -x 192.168.1.1 +trace

# get all records associated with an address
dig any example.com

# perform zone transfer for example.com
dig -t AXFR @ns1.example.com example.com

############### OTHER #################

# connect to private intranet using vpnc
# with a virtual private networkusing vpnc
modprobe tun
vpnc
# ssh commands
ssh private-computer
# disconnect
vpnc-disconnect



# create access point with madwifi
wlanconfig ath0 destroy
wlanconfig ath0 create wlandev wifi0 wlanmode ap
iwconfig ath0 essid test
# wds 1 enables 4 address frames necessary for bridging to eth0
iwpriv ath0 wds 1


# create bridge
ifconfig eth0 0.0.0.0 up
ifconfig ath0 0.0.0.0 up
brctl addbr br0
brctl addif br0 eth0
brctl addif br0 ath0
ifconfig br0 192.168.0.101 netmask 255.255.255.0 up


# NAT

# set up lan
ifconfig ath0 192.168.0.1 broadcast 192.168.0.255 netmask 255.255.255.0

# create nat
iptables -F
iptables -t nat -F

# Setup default policies to handle unmatched traffic
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD DROP

# Copy and paste these examples ...
export LAN=ath0
export WAN=eth0

# Finally we add the rules for NAT
iptables -I FORWARD -i ${LAN} -d 192.168.0.0/255.255.0.0 -j DROP
iptables -A FORWARD -i ${LAN} -s 192.168.0.0/255.255.0.0 -j ACCEPT
iptables -A FORWARD -i ${WAN} -d 192.168.0.0/255.255.0.0 -j ACCEPT
iptables -t nat -A POSTROUTING -o ${WAN} -j MASQUERADE

# Tell the kernel that ip forwarding is OK
echo 1 > /proc/sys/net/ipv4/ip_forward
for f in /proc/sys/net/ipv4/conf/*/rp_filter ; do echo 1 > $f ; done



# mount sshfs
sshfs -p SSHPORT example.com: dir/to/mount/to
# umount sshfs
fusermount -u dir/to/mount/to


# Add VPN connection. This should create the file 
# /etc/ppp/peers/ConnectionName, and inside it, all the
# information about your connection. It is possible to 
# add options in this file that would otherwise be given to pppd.
# For example, it might be desirable to add a line containing
# "usepeerdns" in order to use the dns from the vpn connection.
#
# It will also add infomation about this connection to the file
# /etc/ppp/chap-secrets. If you need any routes to be 
# setup after this connection is created, add them to the file
# /etc/ppp/ip-up.d/01-routes.sh.
pptpsetup --create ConnectionName --server pptp-server.example.com --username myusername

# initialize the vpn connection
pon ConnectionName

# stop the connection
poff ConnectionName

# Here is a sample /etc/ppp/ip-up.d/01-routes.sh:
$ cat /etc/ppp/ip-up.d/01-routes.sh
#!/bin/bash

INTERFACE="$1"
CONNECTION="$6"

# if we are being called as part of the tunnel startup
if [ "${CONNECTION}" = "ConnectionName" ] 
then
	/sbin/route add -net 10.1.0.0 netmask 255.255.0.0 dev ${INTERFACE}
	/sbin/route add -net exchange.server.example.com netmask 255.255.255.255 dev ${INTERFACE}
fi

$
