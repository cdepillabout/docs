filetype plugin on
filetype indent on

set fileencodings=utf-8
set ttymouse=xterm2		" mouse scrolling in vim
set mouse=a
set foldenable
set background=dark
set tabstop=4			" 4-space tab indent width
set shiftwidth=4		" allows you to use < and > to indent/unindent blocks
set softtabstop=4		" see multiple space characters as a tab
set shiftround			" Indent to nearest tab stop
set autoindent			" carries over previous indent to the next line

" Tell vim to remember certain things when we exit
"  '100 : marks will be remembered for up to 100 previously edited files
"  "100 : will save up to 100 lines for each register
"  :20 : up to 20 lines of command-line history will be remembered
"  % : saves and restores the buffer list
"  n... : where to save the viminfo files
set viminfo='100,\"100,:20,%,n~/.viminfo

set wildmode=list:longest	" When autocompleting things, do it like the shell
set wildmenu				" Autocomplete things on the menu?
set scrolloff=3				" Scroll when the cursor is 3 lines from top or bottom
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set ruler					" know how far you are in a file
set enc=utf-8
set fenc=utf-8
set fencs=iso-2022-jp,euc-jp,cp932
set backspace=indent,eol,start	" make sure backspace works correctly

set guifont=Bitstream\ Vera\ Sans\ Mono\ 14 "font names to be used in gui

" try to always use a syntax
syntax on

" this combination works out well to only apply case to searches
" if there is an uppercase letter in your search string
set ignorecase
set smartcase


" always show a tabline
set showtabline=2

colorscheme darkblue
"colorscheme default
"colorscheme delek
"colorscheme desert
"colorscheme torte

" highlight tab line differently
hi TabLine term=bold,reverse cterm=bold ctermfg=black ctermbg=white
hi TabLineFill term=bold,reverse cterm=bold ctermfg=white ctermbg=white
hi TabLineSel term=reverse ctermfg=white ctermbg=lightblue

" highlight the popup menu a little differently
hi PmenuSel ctermbg=lightblue

" make sure the normal background is black
hi Normal guibg=black


" settings specifically for java from 
" http://vimdoc.sourceforge.net/htmldoc/syntax.html
let java_highlight_java_lang_ids=1
let java_highlight_all=1
"let java_highlight_functions="style"
"let java_allow_cpp_keywords=1

" Minibufexplorer plugin settings
"let g:miniBufExplMapWindowNavVim = 1	" Let C-h, C-j, C-k, C-l move your 
										" current active buffer window
"let g:miniBufExplMapCTabSwitchBufs = 1	" Let C-TAB move to the next buffer and
										" C-SHIFT-TAB move to the previous
										" buffer
"let g:miniBufExplModSelTarget = 1		" Force minibufferexplorer to put
										" buffers in windows with 
										" non-modifiable buffers
										"

" make sure xml files are folded
let g:xml_syntax_folding=1

" make sure javascript files are folded
"let g:javaScript_fold=1

" use F5 for turning off and on hlsearch,
" in both input mode (imap?) and command mode (map?)
map <F5> :set hlsearch!<CR>
imap <F5> <ESC>:set hlsearch!<CR>a

" use F6 for turning on and off paste mode
map <F6> :set paste!<CR>
imap <F6> <ESC>:set paste!<CR>a

" use <C-h> and <C-l> to go forward and backward in tabs
" nnoremap just makes a normal mode mapping
nnoremap <C-h> gT
nnoremap <C-l> gt

" got to tab number (really only for gvim)
nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt
nnoremap <A-0> 10gt

" F2 for turning on and off tag list
nnoremap <F2> :TlistToggle<CR>

" this is needed for running taglist in screen:
let Tlist_Inc_Winwidth = 0

" use CTRL-s for saving
" this doesn't work...
"nmap <c-s> :w<CR>
"imap <c-s> <Esc>:w<CR>a

" in input mode, what about we try using jj as escape
inoremap jj <Esc>

" source ~/.vim/plugin/cscope_maps.vim
" source ~/.vim/syntax/javascript.vim

" show when autocmds are called
"set verbose=9


""""""""" This uses the execute command to create an autocmd 
""""""""" that sets the fold_method if the syntax matches.
""""""""" You have to use execute so that the variables get
""""""""" evaluated now instead of when the autocmd executes.

function Add_auto_foldmethod(syntax_of_file, fold_method)
	execute "autocmd Syntax * "
		\ "if expand(\"<amatch>\") == \"" . a:syntax_of_file . "\" | "
		\ "execute \"set foldmethod=" . a:fold_method . "\" | "
		\ " endif "
endfunction

call Add_auto_foldmethod("c", "syntax")
call Add_auto_foldmethod("cpp", "syntax")
"call Add_auto_foldmethod('asm', 'indent')
call Add_auto_foldmethod("java", "syntax")
call Add_auto_foldmethod("python", "indent")
call Add_auto_foldmethod("css", "indent")
call Add_auto_foldmethod("sas", "syntax")
call Add_auto_foldmethod("xml", "syntax")
call Add_auto_foldmethod("ant", "syntax")
call Add_auto_foldmethod("javascript", "indent")

" Make sure I can get spell checking when the file I am editing does not have
" a syntax associated with it.

" Python needs spaces instead of tabs.
autocmd BufRead,BufNewFile *.py set expandtab
" maybe this could also be done with
"autocmd FileType python set expandtab

" special settings for sas files
autocmd FileType sas set tabstop=3			" 3-space tab indent width
autocmd FileType sas set shiftwidth=3		" allows you to use < and > to indent/unindent blocks
autocmd FileType sas set softtabstop=3		" see multiple space characters as a tab

" Make vim jump to the last position that you were editing in the file.
" When we reload, tell vim to restore the cursor to the saved position.
" This long, ugly thing is needed because funny things happen when you 
" use folding.
augroup JumpCursorOnEdit
 au!
 autocmd BufReadPost *
 \ if expand("<afile>:p:h") !=? $TEMP |
 \ if line("'\"") > 1 && line("'\"") <= line("$") |
 \ let JumpCursorOnEdit_foo = line("'\"") |
 \ let b:doopenfold = 1 |
 \ if (foldlevel(JumpCursorOnEdit_foo) > foldlevel(JumpCursorOnEdit_foo - 1)) |
 \ let JumpCursorOnEdit_foo = JumpCursorOnEdit_foo - 1 |
 \ let b:doopenfold = 2 |
 \ endif |
 \ exe JumpCursorOnEdit_foo |
 \ endif |
 \ endif
 " Need to postpone using "zv" until after reading the modelines.
 autocmd BufWinEnter *
 \ if exists("b:doopenfold") |
 \ exe "normal zv" |
 \ if(b:doopenfold > 1) |
 \ exe "+".1 |
 \ endif |
 \ unlet b:doopenfold |
 \ endif
augroup END


" turn these on if you want to use vim over a slow link
"set lazyredraw
"set nottyfast
