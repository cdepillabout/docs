# /etc/skel/.bashrc:
#
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !


# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]] ; then
	# Shell is non-interactive.  Be done now!
	return
fi

# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
if [ -x /usr/bin/dircolors ]; then
	eval "`dircolors -b`"
elif [[ -f /etc/DIR_COLORS ]]; then
	eval `dircolors -b /etc/DIR_COLORS`
elif [[ -f ~/.dir_colors ]]; then
	eval `dircolors -b ~/.dir_colors`
fi

if [[ "$(uname)" == "Linux" ]]; then
	alias ls="ls --color=auto"
	alias grep="grep --color=auto"
elif [[ "$(uname)" == "FreeBSD" ]]; then
	export CLICOLOR=1
	alias grep="grep --color=auto"
elif [[ "$(uname)" == "OpenBSD" ]]; then
	# We use the gnu versions of ls and grep
	# so that we can get color.
	# We must install these programs first.
	alias ls="gls --color=auto"
	alias grep="ggrep --color=auto"

	# This is so that root doesn't take all the bash
	# settings from our user when su'ing.
	# Root uses ksh by default, not bash.
	alias su="su -l"

	# we want vim and other commands to use color
	# when running under X
	if [[ "$TERM" == xterm* ]]; then
		export TERM="xterm-color"
	fi
fi

alias lsr="ls -rt"

# less interprets color escape sequences instead of
# just printing them to the screen
alias less="less -R"

# this will get the location of $1 (from the $PATH)
function get_location_of_file()
{
	tmp_filename=$1
	tmp_fullpath=`which ${tmp_filename} 2>/dev/null`

	if [ -n "${tmp_fullpath}" ]
	then
		echo ${tmp_fullpath}
	fi
}

# this takes an argument list of filenames and outputs
# the first one that can be found on $PATH.
# It outputs a full path to the file.
function get_correct_filename_from_choices()
{
	while ((1))
	do
		# break if there are no more arguments
		if [ -z $1 ]
		then
			break
		fi

		# get the full path of the filename
		tmp_filename=$1
		shift
		tmp_fullpath=`get_location_of_file ${tmp_filename}`

		# if this program is on $PATH, echo it's full path
		# and get out of this loop
		if [ -n "${tmp_fullpath}" ]
		then
			echo ${tmp_fullpath}
			break
		fi
	done
}

# this is so less will open .gz and other similar files
# instead of just displaying garbage
less_pipe_location=`get_correct_filename_from_choices "lesspipe" "lesspipe.sh"`
export LESSOPEN="| ${less_pipe_location} %s"

# Change the window title of X terminals 
case $TERM in
	xterm*|rxvt*|Eterm)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
		;;
	screen)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
		;;
esac


# strict umask
umask 0077


# put the git branch in our prompt
git_prompt()
{
	git_branch=`git branch 2>/dev/null | grep "\*" | sed -e "s/^\* //"`

	if [ -n "${git_branch}" ]
	then
		echo -n "${git_branch} "
	fi
}

# this escape sequence is used so that screen can set
# the window title
if [ "$TERM" == 'screen' ]; then
	SCREEN_PS1_ESCAPE='\[\033k\033\\\]'
else
	SCREEN_PS1_ESCAPE=''
fi

if [[ $EUID -ne 0 ]] 
then
	if [ -n "${SSH_CLIENT}" -a -n "${SSH_CONNECTION}" -a -n "${SSH_TTY}" ]
	then
		# give a different prompt if we are on a remote connection
		export PS1='\[\033[01;32m\]\u\[\033[01;34m\]@\[\033[01;35m\]\h\[\033[01;34m\] \w \[\033[01;33m\]$(git_prompt)\[\033[01;34m\]'${SCREEN_PS1_ESCAPE}'\$\[\033[00m\] '
	else
		export PS1='\[\033[01;32m\]\u\[\033[01;34m\]@\[\033[01;32m\]\h\[\033[01;34m\] \w \[\033[01;33m\]$(git_prompt)\[\033[01;34m\]'${SCREEN_PS1_ESCAPE}'\$\[\033[00m\] '
	fi
# give a different prompt if we are root
else
	if [ -n "${SSH_CLIENT}" -a -n "${SSH_CONNECTION}" -a -n "${SSH_TTY}" ]
	then
		# give a different prompt if we are on a remote connection
		export PS1='\[\033[01;31m\]\u\[\033[01;34m\]@\[\033[01;35m\]\h\[\033[01;34m\] \w \$\[\033[00m\] '
	else
		export PS1='\[\033[01;31m\]\u\[\033[01;34m\]@\[\033[01;32m\]\h\[\033[01;34m\] \w \$\[\033[00m\] '
	fi
fi

# Normal PS1
#export PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '


# set my locale for man
alias man='LC_ALL="C" LANG="C" man'

# make emacs always open in non-graphical mode
alias emacs='emacs -nw '

# make vim open with the servername as "vimserver"
#alias vim='vim --servername "vimserver" '

# make sure vim opens up tabs for multiple files
alias vim='vim -p '
alias gvim='gvim -p '

# make command for opening files on an already open vim browser
#alias rvim='vim --servername "vimserver" --remote-tab-silent '
alias rgvim='gvim --remote-tab-silent '

alias highlight='glark --no-filter -N --text-color "bold red" '

# make sure java runs in server mode and with assertions enabled
alias java='java -server -ea '

# git aliases
alias gadd='git add '
alias gb='git branch '
alias gba='git branch -a '
alias gcam='git commit -a -m '
alias gcm='git commit -m '
alias gco='git checkout '
alias gdff='git diff '
alias gdiff='git diff '
alias glg='git log '
alias glog='git log '
alias gmg='git merge '
alias gmrg='git merge '
alias gph='git push '
alias gps='git push '
alias gpsh='git push '
alias gpush='git push '
alias gpl='git pull '
alias gpll='git pull '
alias gpull='git pull '
alias gst='git status '

# screen automatically connects to a running session
alias screen='screen -R '

# don't record duplicate items in history or 
# lines starting with a space ('$  ls -la')
export HISTCONTROL='ignoreboth'

# I don't want a git pager
export GIT_PAGER=''

# add my program directory
export PATH="$PATH:$HOME/docs/code/bin:/home/illabout/programming/bin" 

# add classpath for java
export CLASSPATH="$CLASSPATH:..:/usr/share/junit-4/lib/junit.jar"
export CLASSPATH="$CLASSPATH:/usr/share/hamcrest-core/lib/hamcrest-core.jar"


# add default browser
export BROWSER=`get_correct_filename_from_choices "firefox-bin" "firefox"`

export EDITOR=`get_correct_filename_from_choices "/usr/bin/vim" "/usr/local/bin/vim"`

# XDG Base Directory Specification
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"

# add the filesystem from the home directory to the PATH
if [ -d "$HOME/filesystem/bin" ]
then
	export PATH="$PATH:$HOME/filesystem/bin"

	# if we have our filesystem, then make sure the python path
	# is set correctly within it
	export PYTHONPATH="$PYTHONPATH:$HOME/filesystem/lib/python2.6/site-packages/"
fi


# add a python path for modules I have installed myself
if [ -d "$HOME/python_modules/" ]
then
	export PYTHONPATH="$PYTHONPATH:$HOME/python_modules/"
fi

# source the local rc file with local commands
if [ -f "$HOME/.local-bashrc" ]
then
	source "${HOME}/.local-bashrc"
fi
