#!/bin/bash

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.

# Here is another way to do this:
# [ -z "$PS1" ] && return
if [[ $- != *i* || "$TERM" == "dumb" || "$0" != *bash ]] ; then
	# Shell is non-interactive or shell is not bash.  Be done now!
    PROMPT_COMMAND=''
    return
fi

# this gets us some functions and variables needed by various programs
if [[ -e "${HOME}/docs/code/library.sh" ]] ; then
	source "${HOME}/docs/code/library.sh"
fi

# source the global /etc/profile
if [[ -f "/etc/profile" ]] ; then
	source "/etc/profile"
fi

# Enable colors for ls, etc.
if [ -x "`get_location_of_file dircolors`" ]; then
	eval "`dircolors -b`"
elif [[ -f /etc/DIR_COLORS ]]; then
	eval `dircolors -b /etc/DIR_COLORS`
elif [[ -f ~/.dir_colors ]]; then
	eval `dircolors -b ~/.dir_colors`
fi

if [[ "$(uname)" == "Linux" || "$(uname)" == CYGWIN* ]]; then
	alias ls="ls --color=auto"
	alias grep="grep --color=auto"
	alias xgrep="xgrep --color=auto"
elif [[ "$(uname)" == "FreeBSD" ]]; then
	export CLICOLOR=1
	alias grep="grep --color=auto"
elif [[ "$(uname)" == "OpenBSD" ]]; then
	# We use the gnu versions of ls and grep
	# so that we can get color.
	# We must install these programs first.
	alias ls="gls --color=auto"
	alias grep="ggrep --color=auto"

	# This is so that root doesn't take all the bash
	# settings from our user when su'ing.
	# Root uses ksh by default, not bash.
	alias su="su -l"

	# we want vim and other commands to use color
	# when running under X
	if [[ "$TERM" == xterm* ]]; then
		export TERM="xterm-color"
	fi
elif [[ "$(uname)" == "Darwin" ]]; then
	export CLICOLOR=1
	#export LSCOLORS=DxGxcxdxCxegedabagacad
fi

alias lsr="ls -rt"

# less interprets color escape sequences instead of
# just printing them to the screen
alias less="less -R"


# this is so less will open .gz and other similar files
# instead of just displaying garbage
less_pipe_location=`get_correct_filename_from_choices "lesspipe" "lesspipe.sh"`
export LESSOPEN="| ${less_pipe_location} %s"

# strict umask
umask 0077

# have bash check if an option is supported and set it if it is.
# There are many options (like globstar and autocd) that are only
# available in bash 4+.
shopt_check_and_set() {
	option="$1"
	if [ -n "$(shopt -p | grep "${option}")" ] ;
	then
		shopt -s "${option}"
	fi

}

# make bash check the window size after each command
shopt_check_and_set "checkwinsize"

# automatically change directory if you just type the directory on the command line.
shopt_check_and_set "autocd"

# be able to use ** to match all subdirs
shopt_check_and_set "globstar"

# append to the history file, don't overwrite it
shopt_check_and_set "histappend"

# save multi-line commands to the same line in the history
shopt_check_and_set "cmdhist"

# this escape sequence is used so that screen can set
# the window title
case $TERM in
	xterm*|rxvt*|Eterm)
		if [ -n "$ROXTERM_NUM" ] ; then
			SCREEN_OR_XTERM_PS1_ESCAPE='\[\033]0;bash\007\]'
		else
			SCREEN_OR_XTERM_PS1_ESCAPE='\[\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007\]'
		fi
		;;
	screen)
		# for now, don't use screen
		# SCREEN_OR_XTERM_PS1_ESCAPE='\[\033k\033\\\]'
		SCREEN_OR_XTERM_PS1_ESCAPE=''
		;;
	*)
		SCREEN_OR_XTERM_PS1_ESCAPE=''
		;;
esac


# colors for using in PS1
PS1_black="\[\033[01;30m\]"
PS1_red="\[\033[01;31m\]"
PS1_green="\[\033[01;32m\]"
PS1_yellow="\[\033[01;33m\]"
PS1_blue="\[\033[01;34m\]"
PS1_magenta="\[\033[01;35m\]"
PS1_cyan="\[\033[01;36m\]"
PS1_white="\[\033[01;37m\]"

PS1_normal_text="\[\033[00;00m\]"

PS1_git_branch_color="${PS1_yellow}"
PS1_mercurial_branch_color="${PS1_magenta}"

PS1_sandbox_color="${PS1_cyan}"
PS1_virtualenv_color="${PS1_white}"
PS1_nixshell_color="${PS1_green}"


# put the git branch in our prompt
get_git_or_hg_branch()
{
	# try to see if this is a git branch first
	git_branch=`git branch 2>/dev/null | grep "\*" | sed -e "s/^\* //"`
	if [ -n "${git_branch}" ] ; then
		echo -n "${PS1_git_branch_color}${git_branch} "
		return
	fi

	# now try to see if it is a mercurial branch
	mercurial_branch=`hg branch 2>/dev/null`
	if [ -n "${mercurial_branch}" ] ; then
		echo -n "${PS1_mercurial_branch_color}${mercurial_branch} "
		return
	fi
}

# put the current sandbox in our prompt
get_sandbox()
{
	if [[ -d .cabal-sandbox ]] ; then
		echo -n "${PS1_sandbox_color}. "
		return
	fi
}

# put the current sandbox in our prompt
get_virtualenv()
{
	if [[ -n "$VIRTUAL_ENV" ]] ; then
		echo -n "${PS1_virtualenv_color}, "
		return
	fi
}

# put the current sandbox in our prompt
get_nixshell()
{
	if [[ "$IN_NIX_SHELL" = "1" ]] ; then
		echo -n "${PS1_nixshell_color}NS "
		return
	fi
}


PS1_username="${PS1_green}\u"
PS1_at="${PS1_blue}@"
PS1_hostname="${PS1_green}\h"
PS1_workingdir="${PS1_blue}\w"
# source code management dir
PS1_scmdir=""
# a '$' if we are a normal user and a '#' if we are root
PS1_dollar_or_pound="${PS1_blue}\\\$"

# we want a different color hostname if we
# are on a remote connection
if [ -n "${SSH_CLIENT}" -a -n "${SSH_CONNECTION}" -a -n "${SSH_TTY}" ] ; then
	PS1_hostname="${PS1_magenta}\h"
fi

# this is the command we want to run before every
# command prompt.  it sets our scmdir and colors for us.
# this is for a normal user.
bash_prompt_normal() {
	history -a
	export PS1="${PS1_username}${PS1_at}${PS1_hostname} ${PS1_workingdir} $(get_git_or_hg_branch)$(get_sandbox)$(get_virtualenv)$(get_nixshell)"${SCREEN_OR_XTERM_PS1_ESCAPE}"${PS1_dollar_or_pound} ${PS1_normal_text}"
}
# this is for the root user
bash_prompt_root() {
	history -a
	export PS1="${PS1_username}${PS1_at}${PS1_hostname} ${PS1_workingdir} ${PS1_dollar_or_pound} ${PS1_normal_text}"
}


# we want a slightly different prompt if we are root
if [[ $EUID -eq 0 ]] ; then
	PS1_username="${PS1_red}\u"
	PS1_dollar_or_pound="${PS1_red}\\\$"
	export PROMPT_COMMAND=bash_prompt_root
else
	export PROMPT_COMMAND=bash_prompt_normal
fi

# run the prompt command once so we make sure PS1 is set
$PROMPT_COMMAND


# get the autojump stuff in our prompt if it's available and we're not root
if [[ $EUID -ne 0 ]] ; then
	if [ -e "/etc/profile.d/autojump.bash" ] ;  then
		source "/etc/profile.d/autojump.bash"
	elif [ -e "/usr/share/autojump/autojump.bash" ] ;  then
		source "/usr/share/autojump/autojump.bash"
	fi
fi

# set my locale for man
alias man='LC_ALL="C" LANG="C" man'

# make emacs always open in non-graphical mode
#alias emacs='emacs -nw '

# make vim open with the servername as "vimserver"
#alias vim='vim --servername "vimserver" '

# make sure vim opens up tabs for multiple files
alias vim='vim -p '
alias gvim='gvim -p '

# make command for opening files on an already open vim browser
#alias rvim='vim --servername "vimserver" --remote-tab-silent '
alias rgvim='gvim --remote-tab-silent '

# make sure java runs in server mode and with assertions enabled
alias java='java -server -ea '

# a good rsync command that will work as a `cp` replacemnt.
# When using rsync to copy directories, make sure not to put a
# "/" after the SRC directory name, otherwise everything in
# the directory will be copied, but not the directory itself.
alias rsyncp='rsync -a -P '

# this is a safe version of dd.  It doesn't overwrite the output file.
alias dd='safe-dd '

# ssh-gas alias for git
alias git='ssh-gas -q ; git'

# git aliases
alias gadd='git add '
alias gba='git branch -a '
alias gbav='git branch -a -v '
alias gb='git branch '
#alias gcam='git commit -a -m '
#alias gcm='git commit -m '
alias gco='git checkout '
alias gcv='git commit -v '
alias gdcf='git diff-changed-files '
alias gdf='git diff '
alias gdfw='git diff --word-diff=color --ignore-all-space '
alias gdfc='git diff --cached '
alias gdfwc='git diff --word-diff=color --ignore-all-space --cached '
alias gdfcw='git diff --word-diff=color --ignore-all-space --cached '
alias gdff='git diff '
alias gdffw='git diff --word-diff=color --ignore-all-space '
alias gdffc='git diff --cached '
alias gdiff='git diff '
alias gdiffw='git diff --word-diff=color --ignore-all-space '
alias gdiffc='git diff --cached '
alias gf='git fetch '
alias gfa='git fetch --all '
alias gfp='git fetch --prune '
alias gfap='git fetch --all --prune '
alias gfpa='git fetch --prune --all '
#alias gitka='gitk HEAD ORIG_HEAD '
alias gitka='gitk HEAD HEAD@{1} '
#alias gitkam='gitk HEAD ORIG_HEAD origin/master '
alias gitkam='gitk HEAD HEAD@{1} origin/master '
alias glog='git log '
alias glgp='glg -p '
alias glgap='glga -p '
alias glgpa='glga -p '
alias gpl='git pull '
alias gpll='git pull '
alias gpo='git push origin '
alias gpfo='git push --force-with-lease origin '
alias gpoh='git push origin HEAD '
alias gpfoh='git push --force-with-lease origin HEAD '
alias gpuoh='git push --set-upstream origin HEAD '
alias gpsh='git push '
alias gpshf='git push --force-with-lease '
alias gpsht='git push --tags '
alias gpshu='git push -u '
alias gpshuo='git push -u origin '
alias gpshum='git push -u mine '
alias gpshuoh='git push -u origin HEAD '
alias gpshumh='git push -u mine HEAD '
alias gr='git remote '
alias grv='git remote -v '

# grep aliases
alias rgrep='grep -r '
alias igrep='grep -i '
alias Igrep='grep -I '
alias irgrep='grep -i -r '
alias iIgrep='grep -i -I '
alias rigrep='grep -r -i '
alias rIgrep='grep -r -I '
alias Iigrep='grep -I -i '
alias Irgrep='grep -I -r '
alias irIgrep='grep -i -r -I '
alias iIrgrep='grep -i -I -r '
alias riIgrep='grep -r -i -I '
alias rIigrep='grep -r -I -i '
alias Iirgrep='grep -I -i -r '
alias Irigrep='grep -I -r -i '

# darcs aliases
alias dst='darcs status'
alias dwn='darcs whatsnew'

# screen automatically connects to a running session
alias screen='screen -R '

# an alias for listing the available screen sessions
alias screens='screen -ls | head -n -1 | tail -n +2 | sed -e '"'"'s/\s\+[1234567890]\+.//'"'"' | column -t | sort'

# make sure Anki 2 uses the ~/.anki2/ directory to store the decks and its config files
# instead of the default (which is ~/Anki/).
alias anki="anki --base=\"${HOME}/.anki2\""

# I hate when systemd uses a pager
alias systemctl="systemctl --no-pager "
alias journalctl="journalctl --no-pager "

# This will setup a ftp server using twistd.  This is
# much like the python http server one-liner.
alias twistd-ftp="twistd --nodaemon ftp --port 23984 --root `pwd`"

# This is an alias for gdb that hides the warranty and copyright info.
alias gdb='gdb -q'

# Alias for only listing listening ports.
alias netlisten="netstat -lanp | egrep '^(tcp|udp).+LISTEN.+'"

# function for `ps auwx | grep`
function pgrep ()
{
	local ps_output="$(ps auwwx)"
	echo "${ps_output}" | grep "$@"
}

# git command for pretty printing graph with specified commits for when gitk is not available
function glga ()
{
	ssh-gas -q ; git log --show-signature --graph --decorate --color --all "$@" | less -R
}

function glg ()
{
	ssh-gas -q ; git log --show-signature --graph --decorate --color "$@" | less -R
}

function gcm ()
{
	ssh-gas -q ; git commit -m "$*"
}

function gcam ()
{
	ssh-gas -q ; git commit -a -m "$*"
}

function gcAm ()
{
	ssh-gas -q ; git add -A ; git commit -m "$*"
}

function gcmp ()
{
	ssh-gas -q ; git commit -m "$*" ; git push
}

function gcamp ()
{
	ssh-gas -q ; git commit -a -m "$*" ; git push
}

function gcAmp ()
{
	ssh-gas -q ; git add -A ; git commit -m "$*" ; git push
}

function gst ()
{
	ssh-gas -q

	# run git status
	git status

	# See if there are any uninitialized submodules.
	git submodule status | cut -c1 | grep -- '-' &> /dev/null
	local ret="$?"

	if [ "$ret" = 0 ] ; then
		echo
		echo "Uninitialized submodules.  Run \`git submodule update --init\`"
	fi
}

# SSH Get Auth Sock.
# This is a command to automatically update the SSH_AUTH_SOCK env var.
# If "-q" is passed, then nothing will be output on error.
# If "-v" is passed, then the auth sock that is currently being used
# will be output.
# (This is needed when connecting to a previously running
# screen session, since the SSH_AUTH_SOCK variable will be the
# previous one we were using.  We need a new updated one
# for this new connection.)
function ssh-gas ()
{
	local QUIET=""
	local VERBOSE=""

	for arg in "$@" ; do
		if [[ "$arg" == '-h' || "$arg" == "--help" ]] ; then
			echo "Usage: ${FUNCNAME[0]} [-h] [-v]"
			echo "Set SSH_AUTH_SOCK environment variable."
			return
		elif [[ "$arg" == '-v' || "$arg" == "--verbose" ]] ; then
			VERBOSE=1
		elif [[ "$arg" == '-q' || "$arg" == "--quiet" ]] ; then
			QUIET=1
		else
			die "Unknown argument \"${arg}\""
		fi
	done

	# get all the existing agent files
	shopt -q extglob
	local SHOPT_PREV_VAL="$?"
	shopt -s extglob
	local agent_files="$(ls -rt /tmp/ssh-+([A-Za-z0-9 ])/agent.+([0-9]) 2>/dev/null)"
	if  [ "$SHOPT_PREV_VAL" -eq "1" ] ; then
		shopt -u extglob
	fi

	# make sure there actually are auth socks to get
	if [ -z "$agent_files" ] ; then
		[ ! "$QUIET" ] && echo "ERROR: no auth sock available"
		return
	fi

	# get the most recently added ssh auth sock
	local auth_sock="$(echo "$agent_files" | tail -1)"
	[ "$VERBOSE" ] && echo "using auth sock: $auth_sock"
	export SSH_AUTH_SOCK="$auth_sock"
}

# these are aliases for cd'ing and ls'ing at the same time
function cd_and_ls_func(){
	cd "$@" && ls
}
function cd_and_lsl_func(){
	cd "$@" && ls -l
}
function autojump_func() {
	new_path="$(autojump $@)"
	if [ -n "$new_path" ]; then
		echo -e "\\033[31m${new_path}\\033[0m"
		cd "$new_path"
	fi
}
function autojump_and_ls_func(){
	new_path="$(autojump $@)"
	if [ -n "$new_path" ]; then
		echo -e "\\033[31m${new_path}\\033[0m"
		cd "$new_path"
		ls
	fi
}
function autojump_and_lsl_func(){
	new_path="$(autojump $@)"
	if [ -n "$new_path" ]; then
		echo -e "\\033[31m${new_path}\\033[0m"
		cd "$new_path"
		ls -l
	fi
}
alias c='cd_and_ls_func'
alias cl='cd_and_lsl_func'
alias jd='autojump_func'
alias j='autojump_and_ls_func'
alias jl='autojump_and_lsl_func'


# add a command for updating pacman mirror list
function reflector-update-mirrorlist() {
	if [[ $EUID -ne 0 ]] ; then
		echo "ERROR! Cannot update the mirror list if you are not root." >&2
		return 1
	fi

	mirrorlist="$(/usr/bin/reflector --number 15 --threads 10 --latest 50 --sort rate -c "Japan" -c "United States" -c "Korea")"

	if [ -z "$mirrorlist" ] ; then
		echo "ERROR! Could not get an updated mirrorlist." >&2
		return 1
	fi

	if [ -f "/etc/pacman.d/mirrorlist" ] ; then
		echo "Moving old mirrorlist to /etc/pacman.d/mirrorlist.bak..."
		mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
	fi

	# now move our new mirror list into place
	echo "$mirrorlist" > /etc/pacman.d/mirrorlist

	chmod 0644 /etc/pacman.d/mirrorlist

	# output our new mirrorlist to the screen
	echo "New mirrorlist:"
	echo "---------------------------------------------"
	echo "$mirrorlist" #> /etc/pacman.d/mirrorlist
	echo "---------------------------------------------"
	echo "Done."
	return 0
}

function mytake_and_ls() {
	mytake "$@"
	[ "$?" = "0" ] && ls
}
function mytake() {
	take "$@"
	ret="$?"
	if [ "${ret}" != "0" ] ; then
		return "${ret}"
	fi

	last_arg="${@:$#:1}"
	cd "${last_arg}"
}
alias take='mytake'
alias t='mytake_and_ls'

# don't record duplicate items in history or
# lines starting with a space ('$  ls -la')
export HISTCONTROL='ignoreboth'

# make history bigger
export HISTFILESIZE=20000
export HISTSIZE=10000

# ignore dumb commands in history
export HISTIGNORE="&:ls:[bf]g:exit:cd:gst:hg st:lsr:ls -lah:tree"

# I don't want a git pager
export GIT_PAGER=''

# I don't want a darcs pager
export DARCS_PAGER='cat'

# add /sbin, /usr/sbin, and /usr/local/sbin to path if they are not in it
append_to_path PATH "/sbin"
append_to_path PATH "/usr/sbin"
append_to_path PATH "/usr/local/sbin"

# add my program directory
append_to_path PATH "$HOME/docs/code/bin"

# add classpath for java
append_to_path_nocheck CLASSPATH "/usr/share/junit-4/lib/junit.jar"
append_to_path_nocheck CLASSPATH "/usr/share/hamcrest-core/lib/hamcrest-core.jar"


# add default browser
export BROWSER=`get_correct_filename_from_choices "firefox-bin" "firefox"`

export EDITOR=`get_correct_filename_from_choices "/usr/bin/vim" "/usr/local/bin/vim"`

# XDG Base Directory Specification
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DESKTOP_DIR="$HOME"
export XDG_DOWNLOAD_DIR="$HOME"
export XDG_DOCUMENTS_DIR="$HOME"
export XDG_MUSIC_DIR="$HOME"
export XDG_PICTURES_DIR="$HOME"
export XDG_PUBLICSHARE_DIR="/dev/null"
export XDG_TEMPLATES_DIR="$HOME"
export XDG_VIDEOS_DIR="$HOME"


# Set colors for GCC (Only works on >=4.9)
export GCC_COLORS="error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"

# We xauth stuff to be set correctly if we are root.
if [[ $EUID -eq 0 ]] ; then
	# make sure we can actually access xauth functionality
	if [ -f "/usr/bin/xauth" ] ; then
		# make sure we didn't just log in as root
		if [ "$(id -u -n)" != "$USER" ] ; then
			# Make sure the user actually has an .Xauthority file setup
			# that we can use.
			if [ -f "/home/$USER/.Xauthority" ] ; then
				export XAUTHORITY="/home/$USER/.Xauthority"
			fi
		fi
	fi
fi

# add the filesystem from the home directory to the PATH
append_to_path PATH "$HOME/filesystem/bin"

# This will allow me to start installing individual packages to
# $HOME/filesystem/PACKAGENAME/ instead of to $HOME/filesystem/.
# This should let me manage individual packages much more easily
# and manage them much more similar to how nix manages packages.
for f in $HOME/filesystem/*/bin
do
	append_to_path PATH "${f}"
done

# check to make sure that new packages are not added to $HOME/filesystem/,
# but instead added to $HOME/filesystem/PACKAGENAME/.
if [ -d "$HOME/filesystem/bin" ] ; then
	temp_file="$(mktemp)"
	touch -t 201502120000 "$temp_file"
	file_num="$(find "$HOME/filesystem/bin" -newer "$temp_file" | wc -l)"
	rm -rf "$temp_file"
	if [ "$file_num" -gt "0" ] ; then
		echo "WARNING: files in $HOME/filesystem/bin/ are newer than 2015/02/12."
		echo "Packages should be placed in $HOME/filesystem/PACKAGENAME/ instead."
		echo "$HOME/filesystem/ should be used like the nix-store."
	fi
	append_to_path PATH "$HOME/filesystem/bin"
fi

# If we have our filesystem, then make sure the python path
# is set correctly within it.
for f in $HOME/filesystem/lib/python* $HOME/filesystem/*/lib/python*
do
	append_to_path PYTHONPATH "${f}/site-packages/"
done

# bash completions (only used if we are not root)
if [[ $EUID -ne 0 ]] ; then
	# load bash completions if we have them
	filesystem_bash_completion_script="/usr/share/bash-completion/bash_completion"
	[ -r "$filesystem_bash_completion_script" ] && . "$filesystem_bash_completion_script"

	# load local bash completions
	for local_bash_completion_dir in $HOME/filesystem/etc/bash_completion.d $HOME/filesystem/*/etc/bash_completion.d
	do
		if [ -d "$local_bash_completion_dir" ] ; then
			if [ -f "$filesystem_bash_completion_script" ] ; then
				# this have command gets unset at the end of /etc/bash_completion,
				#so we need to put it back in
				have()
				{
					unset -v have
					# Completions for system administrator commands are installed as well in
					# case completion is attempted via `sudo command ...'.
					PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin type $1 &>/dev/null &&
						have="yes"
				}

				for f in $(LC_ALL=C command ls "$local_bash_completion_dir"); do
					source "${local_bash_completion_dir}/${f}"
				done
			fi
		fi
	done

	# This doesn't work...
	#if [ "$(func_exists __gitcomp_nl)" = "yes" ]; then
	#	function _git_remotes_helper_function ()
	#	{
	#		local cur_="$cur" cmd="${words[1]}"
	#		local i c=2 remote="" pfx="" lhs=1 no_complete_refspec=0
	#		__gitcomp_nl "$(__git_remotes)" "$pfx" "$cur_"
	#	}
	#fi

	function completion_for_alias ()
	{
		if [ "$(func_exists $2)" = "yes" ]; then
			complete -o bashdefault -o default -F "$2" "$1" 2>/dev/null
		fi
	}

	completion_for_alias "glg" "__git_complete_revlist"
	completion_for_alias "gco" "__git_complete_revlist"
	# This doesn't work...
	#completion_for_alias "gfp" "_git_remotes_helper_function"
fi

# Add cabal to path if it isn't there already
prepend_to_path PATH "$HOME/.cabal/bin"

# Add ~/.local/bin to the PATH because `stack` installs things there.
append_to_path PATH "$HOME/.local/bin"

# If `stack` is available on the path, source it's bash completion script.
type -P "stack" >/dev/null && eval "$(stack --bash-completion-script stack)"

# If opam configuration files are on the system, then source them.  Else, if
# opam is on the system, read in its environment variables.
if [ -r "${HOME}/.opam/opam-init/init.sh" ] ; then
	source "${HOME}/.opam/opam-init/init.sh" > /dev/null 2> /dev/null
elif hash opam 2>/dev/null ; then
	eval `opam config env`
fi

# start moving to using ~/.bashrc-local instead of ~/.local-bashrc
if [ -f "$HOME/.local-bashrc" ]
then
	echo "I see that ~/.local-bashrc exists, but you should be using ~/.bashrc-local"
	source "${HOME}/.local-bashrc"
fi
# source the local rc file with local commands
if [ -f "$HOME/.bashrc-local" ]
then
	source "${HOME}/.bashrc-local"
fi
