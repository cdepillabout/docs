#!/bin/bash 

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.

# Here is another way to do this:
# [ -z "$PS1" ] && return 
if [[ $- != *i* || "$TERM" == "dumb" || "$0" != *bash ]] ; then
	# Shell is non-interactive or shell is not bash.  Be done now!
    PROMPT_COMMAND=''
    return
fi

# this gets us some functions and variables needed by various programs
if [[ -e "${HOME}/docs/code/library.sh" ]] ; then
	source "${HOME}/docs/code/library.sh"
fi

# Enable colors for ls, etc.
if [ -x "`get_location_of_file dircolors`" ]; then
	eval "`dircolors -b`"
elif [[ -f /etc/DIR_COLORS ]]; then
	eval `dircolors -b /etc/DIR_COLORS`
elif [[ -f ~/.dir_colors ]]; then
	eval `dircolors -b ~/.dir_colors`
fi

if [[ "$(uname)" == "Linux" ]]; then
	alias ls="ls --color=auto"
	alias grep="grep --color=auto"
	alias xgrep="xgrep --color=auto"
elif [[ "$(uname)" == "FreeBSD" ]]; then
	export CLICOLOR=1
	alias grep="grep --color=auto"
elif [[ "$(uname)" == "OpenBSD" ]]; then
	# We use the gnu versions of ls and grep
	# so that we can get color.
	# We must install these programs first.
	alias ls="gls --color=auto"
	alias grep="ggrep --color=auto"

	# This is so that root doesn't take all the bash
	# settings from our user when su'ing.
	# Root uses ksh by default, not bash.
	alias su="su -l"

	# we want vim and other commands to use color
	# when running under X
	if [[ "$TERM" == xterm* ]]; then
		export TERM="xterm-color"
	fi
fi

alias lsr="ls -rt"

# less interprets color escape sequences instead of
# just printing them to the screen
alias less="less -R"


# this is so less will open .gz and other similar files
# instead of just displaying garbage
less_pipe_location=`get_correct_filename_from_choices "lesspipe" "lesspipe.sh"`
export LESSOPEN="| ${less_pipe_location} %s"

# strict umask
umask 0077

# make bash check the window size after each command
shopt -s checkwinsize

# bash will automatically change directory if you just type the directory
# on the command line.  (We need to check if shopts supports autocd.  
# I think this is only in bash4+).
if [ -n "$(shopt -p | grep autocd)" ] ; 
then
	shopt -s autocd
fi

# this escape sequence is used so that screen can set
# the window title
case $TERM in
	xterm*|rxvt*|Eterm)
		if [ -n "$ROXTERM_NUM" ] ; then
			SCREEN_OR_XTERM_PS1_ESCAPE='\[\033]0;bash\007\]'
		else
			SCREEN_OR_XTERM_PS1_ESCAPE='\[\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007\]'
		fi
		;;
	screen)
		SCREEN_OR_XTERM_PS1_ESCAPE='\[\033k\033\\\]'
		;;
	*)
		SCREEN_OR_XTERM_PS1_ESCAPE=''
		;;
esac


# colors for using in PS1
PS1_black="\[\033[01;30m\]"
PS1_red="\[\033[01;31m\]"
PS1_green="\[\033[01;32m\]"
PS1_yellow="\[\033[01;33m\]"
PS1_blue="\[\033[01;34m\]"
PS1_magenta="\[\033[01;35m\]"
PS1_cyan="\[\033[01;36m\]"
PS1_white="\[\033[01;37m\]"

PS1_normal_text="\[\033[00m\]"

PS1_git_branch_color="${PS1_yellow}"
PS1_mercurial_branch_color="${PS1_magenta}"


# put the git branch in our prompt
get_git_or_hg_branch()
{
	# try to see if this is a git branch first
	git_branch=`git branch 2>/dev/null | grep "\*" | sed -e "s/^\* //"`
	if [ -n "${git_branch}" ] ; then
		echo -n "${PS1_git_branch_color}${git_branch} "
		return
	fi
	
	# now try to see if it is a mercurial branch
	mercurial_branch=`hg branch 2>/dev/null`
	if [ -n "${mercurial_branch}" ] ; then
		echo -n "${PS1_mercurial_branch_color}${mercurial_branch} "
		return
	fi
}


PS1_username="${PS1_green}\u"
PS1_at="${PS1_blue}@"
PS1_hostname="${PS1_green}\h"
PS1_workingdir="${PS1_blue}\w"
# source code management dir
PS1_scmdir=""
# a '$' if we are a normal user and a '#' if we are root
PS1_dollar_or_pound="${PS1_blue}\\\$"

# we want a different color hostname if we 
# are on a remote connection
if [ -n "${SSH_CLIENT}" -a -n "${SSH_CONNECTION}" -a -n "${SSH_TTY}" ] ; then
	PS1_hostname="${PS1_magenta}\h"
fi

# this is the command we want to run before every
# command prompt.  it sets our scmdir and colors for us.
# this is for a normal user.
bash_prompt_normal() {
	export PS1="${PS1_username}${PS1_at}${PS1_hostname} ${PS1_workingdir} $(get_git_or_hg_branch)"${SCREEN_OR_XTERM_PS1_ESCAPE}"${PS1_dollar_or_pound} ${PS1_normal_text}"
}
# this is for the root user
bash_prompt_root() {
	export PS1="${PS1_username}${PS1_at}${PS1_hostname} ${PS1_workingdir} ${PS1_dollar_or_pound} ${PS1_normal_text}"
}


# we want a slightly different prompt if we are root
if [[ $EUID -eq 0 ]] ; then
	PS1_username="${PS1_red}\u"
	PS1_dollar_or_pound="${PS1_red}\\\$"
	export PROMPT_COMMAND=bash_prompt_root
else
	export PROMPT_COMMAND=bash_prompt_normal
fi

# run the prompt command once so we make sure PS1 is set
$PROMPT_COMMAND



# set my locale for man
alias man='LC_ALL="C" LANG="C" man'

# make emacs always open in non-graphical mode
#alias emacs='emacs -nw '

# make vim open with the servername as "vimserver"
#alias vim='vim --servername "vimserver" '

# make sure vim opens up tabs for multiple files
alias vim='vim -p '
alias gvim='gvim -p '

# make command for opening files on an already open vim browser
#alias rvim='vim --servername "vimserver" --remote-tab-silent '
alias rgvim='gvim --remote-tab-silent '

# make sure java runs in server mode and with assertions enabled
alias java='java -server -ea '

# a good rsync command that will work as a `cp` replacemnt.
# When using rsync to copy directories, make sure not to put a
# "/" after the SRC directory name, otherwise everything in
# the directory will be copied, but not the directory itself.
alias rsyncp='rsync -a -P '

# git aliases
alias gadd='git add '
alias gb='git branch '
alias gba='git branch -a '
alias gcam='git commit -a -m '
alias gcm='git commit -m '
alias gco='git checkout '
alias gdff='git diff '
alias gdiff='git diff '
alias glg='git log '
alias glog='git log '
alias gmg='git merge '
alias gmrg='git merge '
alias gph='git push '
alias gps='git push '
alias gpsh='git push '
alias gpush='git push '
alias gpl='git pull '
alias gpll='git pull '
alias gpull='git pull '
alias gst='git status '

# screen automatically connects to a running session
alias screen='screen -R '

# don't record duplicate items in history or 
# lines starting with a space ('$  ls -la')
export HISTCONTROL='ignoreboth'

# I don't want a git pager
export GIT_PAGER=''

# add my program directory
export PATH="$PATH:$HOME/docs/code/bin:/home/illabout/programming/bin" 

# add classpath for java
export CLASSPATH="$CLASSPATH:..:/usr/share/junit-4/lib/junit.jar"
export CLASSPATH="$CLASSPATH:/usr/share/hamcrest-core/lib/hamcrest-core.jar"


# add default browser
export BROWSER=`get_correct_filename_from_choices "firefox-bin" "firefox"`

export EDITOR=`get_correct_filename_from_choices "/usr/bin/vim" "/usr/local/bin/vim"`

# XDG Base Directory Specification
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"

# We xauth stuff to be set correctly if we are root.
if [[ $EUID -eq 0 ]] ; then
	# make sure we can actually access xauth functionality
	if [ -f "/usr/bin/xauth" ] ; then
		# make sure we didn't just log in as root
		if [ "$(id -u -n)" != "$USER" ] ; then
			# Make sure the user actually has an .Xauthority file setup
			# that we can use.
			if [ -f "/home/$USER/.Xauthority" ] ; then
				export XAUTHORITY="/home/$USER/.Xauthority"
			fi
		fi
	fi
fi

# add the filesystem from the home directory to the PATH
if [ -d "$HOME/filesystem/bin" ]
then
	export PATH="$PATH:$HOME/filesystem/bin"

	# if we have our filesystem, then make sure the python path
	# is set correctly within it
	export PYTHONPATH="$PYTHONPATH:$HOME/filesystem/lib/python2.6/site-packages/"
fi


# add a python path for modules I have installed myself
if [ -d "$HOME/python_modules/" ]
then
	export PYTHONPATH="$PYTHONPATH:$HOME/python_modules/"
fi

# source the local rc file with local commands
if [ -f "$HOME/.local-bashrc" ]
then
	source "${HOME}/.local-bashrc"
fi
