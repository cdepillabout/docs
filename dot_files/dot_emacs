
;; Make sure we can load packages.
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

;; Load the "use-package" package manager if does not already exist.
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

(eval-when-compile
    (require 'use-package))


;; Load evil.
(use-package evil
  :ensure t
  :config
  (evil-mode 1)

  ;;;;;;;;;;;;;;;;;;;;;
  ;; Evil - Packages ;;
  ;;;;;;;;;;;;;;;;;;;;;

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
	(evil-leader/set-leader "<SPC>")
	(evil-leader/set-key "gs" 'magit-status)
	)

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-magit
    :ensure t)

  ;;;;;;;;;;;;;;;;;;;;;;
  ;; Evil - Functions ;;
  ;;;;;;;;;;;;;;;;;;;;;;

  (defun insert-space-above (count)
    (interactive "p")
    (dotimes (_ count) (save-excursion (evil-insert-newline-above))))

  (defun insert-space-below (count)
    (interactive "p")
    (dotimes (_ count) (save-excursion (evil-insert-newline-below))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Evil - Key Mappings ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Evil keys for org-mode.
  (evil-define-key 'normal org-mode-map
    ",t" 'org-todo
	",a" 'org-agenda
    ",t" 'org-todo
    ",I" 'org-clock-in
    ",O" 'org-clock-out
    ",G" 'org-clock-goto
	)

  ;; Global evil mappings.
  (evil-define-key nil evil-normal-state-map
    (kbd "SPC TAB") 'mode-line-other-buffer
    (kbd "[ SPC") 'insert-space-above
    (kbd "] SPC") 'insert-space-below
    )
  )

(use-package evil-org
  :ensure t
  :after org
  :hook ((org-mode . evil-org-mode)
         (evil-org-mode . evil-org-set-key-theme))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

;; Load magit.
(use-package magit
  :ensure t
  :defer t
  :config
  ;; Make sure magit will prune when fetching.
  (setq magit-fetch-arguments '("--prune"))

  ;; Make sure magit will give us pretty graphs when viewing the log.
  (setq magit-log-arguments '("--graph" "--color" "--decorate" "-n256")))

;;;;;;;;;;;;;;;;;;;
;; Other options ;;
;;;;;;;;;;;;;;;;;;;

;; Don't show the startup screen.
(setq inhibit-startup-screen t)

;; Always follow symlinks when opening files.  This helps with making sure
;; that we are editing files in projects.  Especially dot files.
(setq vc-follow-symlinks t)

;; This is similar to vim's scrolloff.  It makes the screen scroll when you
;; are 3 lines from the top or bottom.
(setq scroll-margin 3)

;; Make sure that shift-insert will actually insert what is on the X
;; clipboard.
(setq select-enable-primary t)

;;;;;;;;;;;;;;;;;;;;;;
;; Colors and Fonts ;;
;;;;;;;;;;;;;;;;;;;;;;

(load-theme 'manoj-dark)

;; Set the default font.
(set-face-attribute 'default nil
  :family "Source Code Pro"
  :height 140
  :weight 'normal
  :width 'normal)

;;;;;;;;;;;;;;;;;;;;;;
;; Org-mode options ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Make sure org files are always indented.
(setq org-startup-indented t)

   ;; Make sure that we can perform command when selecting blocks of text in
   ;; visual mode in org mode.
(setq org-support-shift-select t)

;; Always use org-agenda-log-mode in new agenda views. Can be toggled with
;; 'L'.
(setq org-agenda-start-with-log-mode t)

;; Always use org-agenda-clockreport-mode in new agenda views. Can be toggled
;; with 'R'.
(setq org-agenda-start-with-clockreport-mode t)

;; Don't use the org-agenda time grid.
(setq org-agenda-use-time-grid nil)

;; Make sure the task that is currently being clocked is shown in the clock
;; report.
(setq org-clock-report-include-clocking-task t)

;; Make sure that '_' and '^' are not interpreted as sub and super scripts in
;; org-mode unless the value is surrounded with {}.
(setq org-use-sub-superscripts '{})

;; Setup my GTD stuff.
(with-eval-after-load "org"
  (when (file-directory-p "~/gtd")

    ;; Set which files are checked for agendas.
    (setq
     org-agenda-files
     '("~/gtd/inbox.org"
       "~/gtd/projects.org"
       "~/gtd/projects.org_archive"))

    ;; Define capture templates for use with org-capture.
    (setq
     org-capture-templates
     '(("t"
        "Todo [inbox]"
        entry
        (file+headline "~/gtd/inbox.org" "Inbox")
        "* TODO %i%?")
       ("T"
        "Tickler"
        entry
        (file+headline "~/gtd/tickler.org" "Tickler")
        "* %i%? \n %U")))

    ;; Create the refile targets for moving around tasks.
    (setq
     org-refile-targets
     '(("~/gtd/projects.org" :maxlevel . 3)
       ("~/gtd/someday.org" :level . 1)
       ("~/gtd/tickler.org" :maxlevel . 2)))

    ;; Setup the todo keywords.
    ;;
    ;; "TODO"      -- The task has yet to be done.
    ;; "NEXT"      -- The task is the next to be done in the current project
    ;;                (or is currently being done).
    ;; "WAITING"   -- I am waiting for someone else to finish something or
    ;;             -- get back to me before I continue with this task.
    ;; "ONHOLD"    -- This task is on hold for some other reason and will not
    ;;             -- be worked on.  I may be trying to figure out whether or
    ;;             -- not it will ever be done.
    ;; "DONE"      -- The task has been finished.
    ;; "CANCELLED" -- The task has been cancelled and will not be done.
    (setq
     org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "ONHOLD(o)" "|" "DONE(d)" "CANCELLED(c)")))

    ;; Setup the default column format if it doesn't appear in the file.
    (setq
     org-columns-default-format
     "%4TODO %55ITEM(Task) %7Effort(Effort){:} %7CLOCKSUM(Clock){:} %TAGS")))

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Default Emacs stuff ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (evil-magit use-package magit evil-surround evil-leader))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
