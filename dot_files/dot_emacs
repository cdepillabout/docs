
;; use the gentoo configuration files
;(require 'site-gentoo)

(set-default-font "Bitstream Vera Sans Mono-14")
;(set-default-font "Fixed-18")
;(set-face-attribute 'default nil
;					:family "Inconsolata" :height 180)
;(set-face-attribute 'default nil
;					:family "Bitstream Vera Sans Mono" :height 140)
;(set-face-attribute 'default nil
;					:family "IPAGothic" :height 180)

;; use utf-8
(prefer-coding-system 'utf-8)

;; make sure you have new-line at the end of a document
(setq require-final-newline 'ask)

;; use the X server clipboard
(setq x-select-enable-clipboard t)

;; getting scheme to work in emacs
;(setq scheme-program-name "mzscheme")
(setq scheme-program-name "scm")

; save all backup files to a separate directory
(setq make-backup-files t)
(setq backup-directory-alist (quote ((".*" . "~/.emacs-backups/"))))
(setq auto-save-visited-file-name t)

; when you yank a line, make it yank the following new line.
; To copy a whole line: C-a; C-k, C-y; C-y
(setq kill-whole-line t)

; superboosts C-x b
(iswitchb-mode t)

; scrolling -- only scroll one line of text at a time
; make scrolling smoother
;(setq scroll-conservatively 10000)
(setq scroll-conservatively 3)
(setq scroll-margin 3)
;(setq scroll-step 100)
;(setq scroll-preserve-screen-position 1)

; set autoindent
; Just use C-J to get a new line, not RET
;(define-key global-map (kbd "RET") 'newline-and-indent)

;; In Emacs, to set the mod-N indentation 
;; used when you hit the TAB key, do this:
;;(setq c-basic-offset 2)
;;(setq c-basic-offset 4)

;; To cause the TAB file-character to be interpreted as 
;;mod-N indentation, do this:
(setq tab-width 4)
(setq-default tab-width 4)
;;(setq tab-width 8)

;; To cause TAB characters to not be used in the file for 
;;compression, and for only spaces to be used, do this:
;;(setq indent-tabs-mode nil)


;; Make colors not appear in the shell
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)


(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)

(global-set-key (kbd "C-z") 'hs-toggle-hiding)
;(global-set-key (kbd "C-\\") 'toggle-selective-display)
;(add-hook 'c-mode-common-hook   'hs-minor-mode)
;(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
(add-hook 'java-mode-hook       'hs-minor-mode)
;(add-hook 'lisp-mode-hook       'hs-minor-mode)
;(add-hook 'perl-mode-hook       'hs-minor-mode)
;(add-hook 'sh-mode-hook         'hs-minor-mode)		

;; Save desktops across sessions
(desktop-save-mode 1)

;; make it open firefox when opening a URL
;(setq browse-url-netscape-program "firefox")

;; remove the toolbar
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode 0))
(if (fboundp 'menu-bar-mode)
    (menu-bar-mode 0))
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode 1))

;; no splash screen
(setq inhibit-splash-screen t)

;; format the title-bar to be the buffer name
(setq frame-title-format "%b")

;; Make emacs highlight bracket pairs:
(show-paren-mode t)

;; use y or n instead of yes or not
(fset 'yes-or-no-p 'y-or-n-p)

;; Highlight marked region
(transient-mark-mode t)

(display-time-mode t)

;; stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)

(set-background-color "black")
(set-foreground-color "bisque")

;; syntax hilighting
;(cond ((fboundp 'global-font-lock-mode)
       ;; Turn on font-lock in all modes that support it
;       (global-font-lock-mode t)
       ;; Maximum colors
;       (setq font-lock-maximum-decoration t)))
(global-font-lock-mode 1)
(setq font-lock-maximum-decoration t)


;; makes line numbers and column numbers show up
(line-number-mode 1)
(column-number-mode 1)

;; enables midnight mode.  by default this runs the
;; clean-buffer-list command.  This command 
;; kills buffers that havenâ€™t been visited in 3 days, 
;; or in the last hour in the case of special buffers that
;; generally aren't needed (like *Help*, *Buffer List*...)
(require 'midnight)
(midnight-delay-set 'midnight-delay "4:30am")

;; MY KEYS
;(global-set-key [f1] 'goto-next-buffer) 
;(global-set-key [f2] 'delete-other-windows) 
;(global-set-key [f3] 'delete-window)

;; Disable going into anthy-mode
;(global-set-key "\C-\\" 'anthy-mode)
(global-unset-key "\C-\\")

; make sure we can't accidentally close emacs
; this gets assigned to a code folding function later
;(global-unset-key "\C-z")

; set help to be something more reasonable
(global-set-key "\C-h" 'backward-delete-char)
(global-set-key "\C-x\ ?" 'help)


;(global-set-key [?\C-,] 'goto-next-buffer)
;(global-set-key [?\C-,] 'goto-next-buffer)
(global-set-key [(control ?;)] 'goto-next-buffer)


(defun goto-next-buffer ()
	(interactive)
	(switch-to-buffer nil))	


; Use ESS (Emacs Speaks Statistics)
(if (file-exists-p "/usr/share/emacs/site-lisp/ess")
  (progn (setq load-path (cons "/usr/share/emacs/site-lisp/ess" load-path))
		 (load "/usr/share/emacs/site-lisp/ess/ess-site")))

(if (file-exists-p "~/filesystem/share/emacs/site-lisp/ess")
    (progn (setq load-path (cons "~/filesystem/share/emacs/site-lisp/ess" load-path))
				 (load "~/filesystem/share/emacs/site-lisp/ess/ess-site")))

; don't ask for the starting directory when starting a new process
(setq ess-ask-for-ess-directory nil)

(setq-default ess-sas-submit-command "/usr/local/SAS/SASFoundation/9.2/sas")

; use the special keys for SAS (the 'Fx' keys)
(defun use-sas-keys ()
	(interactive)
	; use keys for all buffers
	(ess-sas-global-unix-keys)
	; use keys for only ESS[SAS] buffers
	;(ess-sas-local-unix-keys)
)

; Use TRAMP 
(setq tramp-default-method "ssh")

; Use the ssh.el so that we can remote an SAS connection
(if (file-exists-p "~/.emacs.d/ssh.el")
	(load "~/.emacs.d/ssh.el"))

;; CLOJURE
;(add-to-list 'load-path "~/.clojure/clojure-mode")
;(require 'clojure-mode)

;(setq clojure-src-root "/home/illabout/.clojure/")
;(eval-after-load 'clojure-mode '(clojure-slime-config))


;(add-to-list 'load-path "~/.clojure/slime")
;(setq inferior-lisp-program "/usr/bin/clojure") ; your Lisp system
;(require 'slime)
;(slime-setup)

; slime with sbcl
(if (file-exists-p "/usr/bin/sbcl")
  (if (file-exists-p "/usr/share/emacs/site-lisp/slime/")
	(progn (setq inferior-lisp-program "/usr/bin/sbcl")
		   (add-to-list 'load-path "/usr/share/emacs/site-lisp/slime/")
		   (require 'slime)
		   ;; These two hooks make sure we go into slime mode when we are
		   ;; editing lisp files or when we are going into inferior-lisp-mode.
		   ;(add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
		   ;(add-hook 'inferior-lisp-mode-hook (lambda () (slime-mode t)))

		   ;; Connect to your lisp automatically when you open a lisp file
		   (defun cliki:start-slime ()
		     (unless (slime-connected-p)
		       (save-excursion (slime))))

		   ;(add-hook 'slime-mode-hook 'cliki:start-slime)
		   
		   (slime-setup '(slime-repl)))))
