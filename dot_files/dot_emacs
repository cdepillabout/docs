
;; Make sure we can load packages.
(require 'package)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

;; Load the "use-package" package manager if does not already exist.
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

(eval-when-compile
    (require 'use-package))


;; Load evil.
(use-package evil
  :ensure t
  :config

  ;;;;;;;;;;;;;;;;;;;;;
  ;; Evil - Packages ;;
  ;;;;;;;;;;;;;;;;;;;;;

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key "gs" 'magit-status)
  )

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-magit
    :ensure t)

  (use-package evil-commentary
    :ensure t
    :config
    (setq evil-commentary-mode t)
    )

  ;; Enable evil mode.  This needs to come after the evil- packages
  ;; above, since they may add hooks that need to get run when
  ;; evil-mode is enabled. See
  ;; https://emacs.stackexchange.com/questions/30332/evil-leader-stops-working-when-i-eval-buffer.
  (evil-mode 1)

  ;;;;;;;;;;;;;;;;;;;;;;
  ;; Evil - Functions ;;
  ;;;;;;;;;;;;;;;;;;;;;;

  (defun insert-space-above (count)
    (interactive "p")
    (dotimes (_ count) (save-excursion (evil-insert-newline-above))))

  (defun insert-space-below (count)
    (interactive "p")
    (dotimes (_ count) (save-excursion (evil-insert-newline-below))))

  (defun move-tab-back ()
    (interactive)
    (tab-bar-move-tab -1))

  (defun move-tab-forward ()
    (interactive)
    (tab-bar-move-tab 1))

  (defvar tabo-cwd default-directory
    "The directory to use as the relative directory for the :tabo
    command.")

  (defun tabo-completion-file-name-table (string pred action)
    "Completion table for file names relative to `tabo-cwd'."
    (let ((default-directory tabo-cwd))
      (completion-file-name-table string pred action)))

  (defalias 'tabo-completion--file-name-table
    (completion-table-with-quoting #'tabo-completion-file-name-table
                                   #'substitute-in-file-name
                                   #'completion--sifn-requote)
    "This is basically `completion--file-name-table' from
minibuffer.el in the emacs source code."
    )

  (evil-ex-define-argument-type tabo-file
    "Handles a tabo file argument."
    :collection tabo-completion--file-name-table)

  (evil-define-interactive-code "<tf>"
    "Ex mode :tabo file argument."
    :ex-arg tabo-file
    (list (when (evil-ex-p) evil-ex-argument)))

  (evil-define-command my-tabo (filename)
    "Open a file in a new tab."
    :repeat nil
    (interactive "<tf>")
    (let ((full-path (expand-file-name filename tabo-cwd)))
        (my-rt full-path))
    )

  (evil-define-command my-pwd-ex-cmd
    "Show the current `tabo-cwd' value.  This is used in the
:tabo and :my-cd ex commands."
    (interactive)
    (message "%s" tabo-cwd))

  (evil-define-command my-cd-ex-cmd (path)
    "Set `tabo-cwd' to a new path.  This affects the relative
path used for the :tabo command."
    :repeat nil
    (interactive "<tf>")
    (let ((new-path (expand-file-name path tabo-cwd)))
        (setq tabo-cwd new-path))
    )

  (evil-define-command my-rt (filename)
    "Open a file in a new tab. This starts completion relative to
the file opened in the currently focused buffer."
    :repeat nil
    (interactive "<f>")
    (let ((value (find-file-noselect filename nil nil t)))
      ;; (message "my-tabo, value: %s, nreverse value: %s" value (nreverse value))

      ;; TODO: If the filename passed to find-file-noselect contains
      ;; wildcards, then value is returned as a list.  However, extra
      ;; files are opened as buffers, not tabs.  This should be modified
      ;; to instead open ALL files returned as tabs.
      (if (listp value)
        (progn
          (setq value (nreverse value))
          (switch-to-buffer-other-tab (car value))
          (mapc 'switch-to-buffer (cdr value))
          value)
        (switch-to-buffer-other-tab value))
      )
    )

  (evil-define-command my-quit
    "Close the current window.  Close the tab if the last window in
the tab was closed.  Run `evil-quit' if the last tab was closed."
    (interactive)
    (let* ((current-window (selected-window))
           (total-visible-windows (length (window-list)))
           (all-tabs (tab-bar-tabs))
           (total-tabs (length all-tabs)))
      (if (> total-visible-windows 1)
          (delete-window)
        (if (> total-tabs 1)
            (tab-bar-close-tab)
          (evil-quit)))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Evil - Key Mappings ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Evil keys for org-mode in normal mode.
  (evil-define-key 'normal org-mode-map
    (kbd "TAB") 'org-cycle
    ",A" 'org-archive-subtree
    ",a" 'org-agenda
    ",G" 'org-clock-goto
    ",I" 'org-clock-in
    ",O" 'org-clock-out
    ",t" 'org-todo
  )

  ;; Evil keys for org-mode in insert mode.
  (evil-define-key 'insert org-mode-map
    (kbd "M-h") 'org-metaleft
    (kbd "M-j") 'org-metadown
    (kbd "M-k") 'org-metaup
    (kbd "M-l") 'org-metaright
  )

  ;; Evil keys for markdown mode.
  (evil-define-key 'normal markdown-mode-map
    (kbd "TAB") 'markdown-cycle)

  ;; Global evil mappings.
  (evil-define-key nil evil-normal-state-map
    (kbd "SPC TAB") 'mode-line-other-buffer
    (kbd "[ SPC") 'insert-space-above
    (kbd "] SPC") 'insert-space-below
    (kbd "C-h") 'tab-bar-switch-to-prev-tab
    (kbd "C-l") 'tab-bar-switch-to-next-tab
    (kbd "C-y") 'move-tab-back
    (kbd "C-u") 'move-tab-forward
    (kbd "Q") 'evil-record-macro
    (kbd "q") 'my-quit
    )

  ;; Ex commands
  (evil-ex-define-cmd "rt" 'my-rt)
  (evil-ex-define-cmd "tabo" 'my-tabo)
  (evil-ex-define-cmd "my-cd" 'my-cd-ex-cmd)
  (evil-ex-define-cmd "my-pwd" 'my-pwd-ex-cmd)
  )

(use-package evil-org
  :ensure t
  :after org
  :hook ((org-mode . evil-org-mode)
         (evil-org-mode . evil-org-set-key-theme))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))

(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init
  (setq markdown-command "multimarkdown")
  )

;; Load magit.
(use-package magit
  :ensure t
  :defer t
  :config
  ;; Make sure magit will prune when fetching.
  (setq magit-fetch-arguments '("--prune"))

  ;; Make sure magit will give us pretty graphs when viewing the log.
  (setq magit-log-arguments '("--graph" "--color" "--decorate" "-n256")))

;; Load haskell-mode.
(use-package haskell-mode
  :ensure t
  :defer t
  :config
  (setq haskell-indentation-where-pre-offset 0)
  )

;; Load purescript-mode.
(use-package purescript-mode
  :ensure t
  :defer t
  :config
  (add-hook 'purescript-mode-hook 'turn-on-purescript-indentation)
  )

;;;;;;;;;;;;;;;;;;;
;; Other options ;;
;;;;;;;;;;;;;;;;;;;

;; Don't show the startup screen.
(setq inhibit-startup-screen t)

;; Always follow symlinks when opening files.  This helps with making sure
;; that we are editing files in projects.  Especially dot files.
(setq vc-follow-symlinks nil)

;; This is similar to vim's scrolloff.  It makes the screen scroll when you
;; are 3 lines from the top or bottom.
(setq scroll-margin 3)

;; Make sure that shift-insert will actually insert what is on the X
;; clipboard.
(setq select-enable-primary t)

;; Smooth scrolling like vim.  Without scroll-conservatively, emacs still
;; sometimes jumps the cursor around the screen when scrolling up.
(setq scroll-step 1)
(setq scroll-conservatively 1000)

;; Make sure the column number is always shown.
(setq column-number-mode t)

;; Set the global default value of buffer-local variables.
(setq-default
  ;; Always show trailing whitespace.
  ;; TODO: This shouldn't be enabled for all buffers, but just for select
  ;; buffers (including org-mode).
  show-trailing-whitespace t
)

;; Show matching parentheses.
(show-paren-mode 1)

;; Disable the menu bar.
(menu-bar-mode -1)

;; If we are using graphical emacs, disable the tool bar and the scroll bar.
(if window-system
  (progn
    (tool-bar-mode -1)
    (scroll-bar-mode -1)))

;; Enable Tab Bar Mode.
(setq tab-bar-show t)

;; Don't show the close button on tabs.
(setq tab-bar-close-button-show nil)

;; Hooks to add to emacs lisp mode.
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    ;; Make sure that tabs are never used.  Spaces are used
	    ;; for indentation.
	    (setq indent-tabs-mode nil)))

;; Display line numbers for each window.
(global-display-line-numbers-mode)

;; Don't create lockfiles that start with '.#'.  This is slightly unsafe, but
;; having those files around is very annoying.
(setq create-lockfiles nil)

;; Make sure the backup files go to a specific directory.
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))

;;;;;;;;;;;;;;;;;;;;;;
;; Colors and Fonts ;;
;;;;;;;;;;;;;;;;;;;;;;

(load-theme 'manoj-dark)

;; Set the default font.
(set-face-attribute 'default nil
  :family "Source Code Pro"
  :height 140
  :weight 'normal
  :width 'normal)

;; Set the cursor color to red to match Vim in the terminal.
(set-cursor-color "red")

;; Set the EOL whitespace to be colored in white.
(set-face-attribute 'trailing-whitespace nil
   :background "white")

;; Set the default font for Japanese characters.
(set-fontset-font t 'japanese-jisx0208 (font-spec :family "IPAPGothic"))

;; Style the tab-bar so it looks like my Vim tab-bar.
(set-face-attribute 'tab-bar nil
  :background "white"
  :foreground "black")
(set-face-attribute 'tab-bar-tab nil
  :background "deep sky blue"
  :foreground "white"
  :box 'nil
  :weight 'bold)
(set-face-attribute 'tab-bar-tab-inactive nil
  ;; :background "deep sky blue"
  :foreground "black"
  :box 'nil
  :weight 'normal
  )

(with-eval-after-load "org"
  (if (display-graphic-p)

    ;; faces to set if we are in the GUI
    (progn
      (set-face-attribute 'org-level-2 nil :foreground "dark goldenrod" :weight 'bold)
      (set-face-attribute 'org-level-3 nil :foreground "firebrick" :weight 'bold)
      (set-face-attribute 'org-special-keyword nil :foreground "light gray" :weight 'light)
      (set-face-attribute 'org-date nil :foreground "dark magenta" :underline nil :weight 'normal)
      (set-face-attribute 'org-tag nil :foreground "cornflower blue" :weight 'light)
    )

    ;; faces to set if we are in the CUI
    (set-face-attribute 'org-level-2 nil :foreground "color-116" :weight 'bold)
    (set-face-attribute 'org-level-3 nil :foreground "color-41" :weight 'bold)
    (set-face-attribute 'org-level-4 nil :weight 'bold)
    (set-face-attribute 'org-level-5 nil :weight 'bold)
    (set-face-attribute 'org-special-keyword nil :foreground "color-95" :weight 'light)
  )
)

;;;;;;;;;;;;;;;;;;;;;;
;; Org-mode options ;;
;;;;;;;;;;;;;;;;;;;;;;

;; Make sure org files are always indented.
(setq org-startup-indented t)

   ;; Make sure that we can perform command when selecting blocks of text in
   ;; visual mode in org mode.
(setq org-support-shift-select t)

;; Always use org-agenda-log-mode in new agenda views. Can be toggled with
;; 'L'.
(setq org-agenda-start-with-log-mode t)

;; Always use org-agenda-clockreport-mode in new agenda views. Can be toggled
;; with 'R'.
(setq org-agenda-start-with-clockreport-mode t)

;; Don't use the org-agenda time grid.
(setq org-agenda-use-time-grid nil)

;; Make sure the task that is currently being clocked is shown in the clock
;; report.
(setq org-clock-report-include-clocking-task t)

;; Make sure that '_' and '^' are not interpreted as sub and super scripts in
;; org-mode unless the value is surrounded with {}.
(setq org-use-sub-superscripts '{})

;; Any time an entry is turned from TODO to DONE, a CLOSED timestamp
;; will be inserted just after the headline.
(setq org-log-done 'time)

;; Set the latex options for rendering equations in org-mode when
;; using the preview with C-c C-x C-l.
(setq
 org-format-latex-options
 '(:foreground default :background default :scale 2.25
   :html-foreground "Black" :html-background "Transparent" :html-scale 2.0
   :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))



;; Setup my GTD stuff.
(with-eval-after-load "org"
  (when (file-directory-p "~/gtd")

    ;; Set which files are checked for agendas.
    (setq
     org-agenda-files
     '("~/gtd/projects.org"
       "~/gtd/projects.org_archive"))

    ;; Define capture templates for use with org-capture.
    (setq
     org-capture-templates
     '(("t"
        "Todo [inbox]"
        entry
        (file+headline "~/gtd/inbox.org" "Inbox")
        "* TODO %i%?")
       ("T"
        "Tickler"
        entry
        (file+headline "~/gtd/tickler.org" "Tickler")
        "* %i%? \n %U")))

    ;; Create the refile targets for moving around tasks.
    (setq
     org-refile-targets
     '(("~/gtd/projects.org" :maxlevel . 3)
       ("~/gtd/someday.org" :level . 1)
       ("~/gtd/tickler.org" :maxlevel . 2)))

    ;; Setup the todo keywords.
    ;;
    ;; "TODO"      -- The task has yet to be done.
    ;; "NEXT"      -- The task is the next to be done in the current project
    ;;                (or is currently being done).
    ;; "WAITING"   -- I am waiting for someone else to finish something or
    ;;             -- get back to me before I continue with this task.
    ;; "ONHOLD"    -- This task is on hold for some other reason and will not
    ;;             -- be worked on.  I may be trying to figure out whether or
    ;;             -- not it will ever be done.
    ;; "DONE"      -- The task has been finished.
    ;; "CANCELLED" -- The task has been cancelled and will not be done.
    (setq
     org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "WAITING(w)" "ONHOLD(o)" "|" "DONE(d)" "CANCELLED(c)")))

    ;; Setup the default column format if it doesn't appear in the file.
    (setq
     org-columns-default-format
     "%4TODO %55ITEM(Task) %7Effort(Effort){:} %7CLOCKSUM(Clock){:} %TAGS")

    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;
;; Default Emacs stuff ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(org-roam purescript-mode yaml-mode nix-mode evil evil-commentary evil-org haskell-mode use-package evil-magit magit evil-surround evil-leader)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
